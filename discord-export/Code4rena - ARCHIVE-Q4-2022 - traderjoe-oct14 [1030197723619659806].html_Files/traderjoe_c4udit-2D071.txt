Files analyzed:
- 2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol
- 2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol
- 2022-10-traderjoe/lib/forge-std/src/Script.sol
- 2022-10-traderjoe/lib/forge-std/src/StdJson.sol
- 2022-10-traderjoe/lib/forge-std/src/Test.sol
- 2022-10-traderjoe/lib/forge-std/src/Vm.sol
- 2022-10-traderjoe/lib/forge-std/src/console.sol
- 2022-10-traderjoe/lib/forge-std/src/console2.sol
- 2022-10-traderjoe/lib/forge-std/src/test/Script.t.sol
- 2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol
- 2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol
- 2022-10-traderjoe/lib/forge-std/src/test/StdError.t.sol
- 2022-10-traderjoe/lib/forge-std/src/test/StdMath.t.sol
- 2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/ERC20VotesHarness.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardControlFirstPriority.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardFirstTry.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControl.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControlCrossChain.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/Ownable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/CrossChainEnabled.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/amb/CrossChainEnabledAMB.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/amb/LibAMB.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL2.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/LibArbitrumL1.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/LibArbitrumL2.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/errors.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/optimism/CrossChainEnabledOptimism.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/optimism/LibOptimism.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/polygon/CrossChainEnabledPolygonChild.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/VestingWallet.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/IGovernor.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/IGovernorCompatibilityBravo.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorPreventLateQuorum.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorProposalThreshold.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockControl.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesComp.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesQuorumFraction.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/IGovernorTimelock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/utils/Votes.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1155.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1155MetadataURI.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1155Receiver.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Receiver.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Spender.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1820Implementer.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1820Registry.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC3156.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721Enumerable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721Metadata.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721Receiver.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC777.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC777Recipient.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC777Sender.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC2612.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/metatx/MinimalForwarder.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlCrossChainMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlEnumerableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AddressImpl.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ArraysImpl.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/BadBeacon.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/Base64Mock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/BitmapMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/CallReceiverMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/CheckpointsImpl.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ClashingImplementation.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ClonesMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ConditionalEscrowMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ContextMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/CountersImpl.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/Create2Impl.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/DoubleEndedQueueMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/DummyImplementation.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ECDSAMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EIP712External.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155BurnableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155Mock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155PausableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155ReceiverMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155SupplyMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155URIStorageMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1271WalletMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165InterfacesSupported.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165MissingData.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165NotSupported.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165CheckerMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165Mock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165StorageMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1820ImplementerMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20BurnableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20CappedMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20DecimalsMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20FlashMintMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20Mock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20PausableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20PermitMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20SnapshotMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20VotesCompMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20VotesMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20WrapperMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC2771ContextMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC3156FlashBorrowerMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC4626Mock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721BurnableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721EnumerableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721Mock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721PausableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721ReceiverMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721RoyaltyMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721URIStorageMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721VotesMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC777Mock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableSetMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EtherReceiverMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorCompMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorCompatibilityBravoMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorPreventLateQuorumMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockCompoundMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockControlMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorVoteMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorWithParamsMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/InitializableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MathMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MerkleProofWrapper.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MulticallTest.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MulticallTokenMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MultipleInheritanceInitializableMocks.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/OwnableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/PausableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/PullPaymentMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/RegressionImplementation.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeCastMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeERC20Helper.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SignatureCheckerMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SignedMathMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SignedSafeMathMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SingleInheritanceInitializableMocks.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/StorageSlotMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/StringsMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/TimersBlockNumberImpl.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/TimersTimestampImpl.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/UUPS/UUPSLegacy.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/UUPS/UUPSUpgradeableMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/VotesMock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/crosschain/bridges.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/crosschain/receivers.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor1.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor2.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor3.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/Clones.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/security/Pausable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/security/PullPayment.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Burnable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Pausable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Capped.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20FlashMint.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Pausable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Snapshot.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20VotesComp.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Wrapper.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/TokenTimelock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Burnable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Pausable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Royalty.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/draft-ERC721Votes.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/IERC777.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/IERC777Recipient.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/IERC777Sender.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/presets/ERC777PresetFixedSupply.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Arrays.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Base64.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Context.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Counters.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Create2.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Multicall.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Timers.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/ConditionalEscrow.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/Escrow.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/RefundEscrow.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Storage.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC1820Implementer.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/IERC1820Implementer.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/IERC1820Registry.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/BitMaps.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/amb/IAMB.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/arbitrum/IArbSys.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/arbitrum/IBridge.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/arbitrum/IInbox.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/arbitrum/IMessageProvider.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/arbitrum/IOutbox.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/compound/ICompoundTimelock.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/optimism/ICrossDomainMessenger.sol
- 2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/polygon/IFxMessageProcessor.sol
- 2022-10-traderjoe/src/LBErrors.sol
- 2022-10-traderjoe/src/LBFactory.sol
- 2022-10-traderjoe/src/LBPair.sol
- 2022-10-traderjoe/src/LBQuoter.sol
- 2022-10-traderjoe/src/LBRouter.sol
- 2022-10-traderjoe/src/LBToken.sol
- 2022-10-traderjoe/src/interfaces/IJoeFactory.sol
- 2022-10-traderjoe/src/interfaces/IJoePair.sol
- 2022-10-traderjoe/src/interfaces/IJoeRouter01.sol
- 2022-10-traderjoe/src/interfaces/IJoeRouter02.sol
- 2022-10-traderjoe/src/interfaces/ILBFactory.sol
- 2022-10-traderjoe/src/interfaces/ILBFlashLoanCallback.sol
- 2022-10-traderjoe/src/interfaces/ILBPair.sol
- 2022-10-traderjoe/src/interfaces/ILBRouter.sol
- 2022-10-traderjoe/src/interfaces/ILBToken.sol
- 2022-10-traderjoe/src/interfaces/IPendingOwnable.sol
- 2022-10-traderjoe/src/interfaces/IWAVAX.sol
- 2022-10-traderjoe/src/libraries/BinHelper.sol
- 2022-10-traderjoe/src/libraries/BitMath.sol
- 2022-10-traderjoe/src/libraries/Buffer.sol
- 2022-10-traderjoe/src/libraries/Constants.sol
- 2022-10-traderjoe/src/libraries/Decoder.sol
- 2022-10-traderjoe/src/libraries/Encoder.sol
- 2022-10-traderjoe/src/libraries/FeeDistributionHelper.sol
- 2022-10-traderjoe/src/libraries/FeeHelper.sol
- 2022-10-traderjoe/src/libraries/JoeLibrary.sol
- 2022-10-traderjoe/src/libraries/Math128x128.sol
- 2022-10-traderjoe/src/libraries/Math512Bits.sol
- 2022-10-traderjoe/src/libraries/Oracle.sol
- 2022-10-traderjoe/src/libraries/PendingOwnable.sol
- 2022-10-traderjoe/src/libraries/ReentrancyGuardUpgradeable.sol
- 2022-10-traderjoe/src/libraries/SafeCast.sol
- 2022-10-traderjoe/src/libraries/SafeMath.sol
- 2022-10-traderjoe/src/libraries/Samples.sol
- 2022-10-traderjoe/src/libraries/SwapHelper.sol
- 2022-10-traderjoe/src/libraries/TokenHelper.sol
- 2022-10-traderjoe/src/libraries/TreeMath.sol
- 2022-10-traderjoe/test/BinHelper.T.sol
- 2022-10-traderjoe/test/Faucet.t.sol
- 2022-10-traderjoe/test/LBFactory.MultiPools.t.sol
- 2022-10-traderjoe/test/LBFactory.t.sol
- 2022-10-traderjoe/test/LBPair.Fees.t.sol
- 2022-10-traderjoe/test/LBPair.FlashLoans.t.sol
- 2022-10-traderjoe/test/LBPair.Liquidity.t.sol
- 2022-10-traderjoe/test/LBPair.Oracle.t.sol
- 2022-10-traderjoe/test/LBPair.Swaps.t.sol
- 2022-10-traderjoe/test/LBPair.t.sol
- 2022-10-traderjoe/test/LBQuoter.t.sol
- 2022-10-traderjoe/test/LBRouter.FeesOnLiquidityAdd.t.sol
- 2022-10-traderjoe/test/LBRouter.Liquidity.t.sol
- 2022-10-traderjoe/test/LBRouter.Swaps.t.sol
- 2022-10-traderjoe/test/LBRouter.t.sol
- 2022-10-traderjoe/test/LBToken.t.sol
- 2022-10-traderjoe/test/LBTokenInternal.t.sol
- 2022-10-traderjoe/test/TestHelper.sol
- 2022-10-traderjoe/test/mocks/ERC20.sol
- 2022-10-traderjoe/test/mocks/ERC20MockDecimals.sol
- 2022-10-traderjoe/test/mocks/ERC20MockDecimalsOwnable.sol
- 2022-10-traderjoe/test/mocks/ERC20WithTransferTax.sol
- 2022-10-traderjoe/test/mocks/Faucet.sol
- 2022-10-traderjoe/test/mocks/FlashloanBorrower.sol
- 2022-10-traderjoe/test/mocks/WAVAX.sol

Issues found:
 G001:
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::51 => bool globalFailed = false;
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::79 => uint256 hevmCodeSize = 0;
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::446 => for (uint i = 0; i < a.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::807 => for (uint i=0; i < b.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::909 => for (uint256 i = 0; i < reads.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1064 => for (uint i = 0; i < max; i++) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1073 => for (uint256 i = 0; i < b.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::225 => uint256 index = 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::54 => for (uint256 i = 0; i < payees.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::324 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::341 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::91 => for (uint256 i = 0; i < proposers.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::97 => for (uint256 i = 0; i < executors.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::249 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::326 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::132 => for (uint256 i = 0; i < signatures.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::103 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::129 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::148 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/CallReceiverMock.sol::48 => for (uint256 i = 0; ; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165InterfacesSupported.sol::54 => for (uint256 i = 0; i < interfaceIds.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorWithParamsMock.sol::30 => uint256 reduction = 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MulticallTest.sol::14 => for (uint256 i = 0; i < recipients.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MulticallTest.sol::19 => for (uint256 i = 0; i < results.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::79 => for (uint256 i = 0; i < length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::92 => for (uint256 i = 0; i < length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::105 => for (uint256 i = 0; i < length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::118 => for (uint256 i = 0; i < length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::131 => for (uint256 i = 0; i < length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::93 => for (uint256 i = 0; i < accounts.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::213 => for (uint256 i = 0; i < ids.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::312 => for (uint256 i = 0; i < ids.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::378 => for (uint256 i = 0; i < ids.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol::47 => for (uint256 i = 0; i < ids.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol::53 => for (uint256 i = 0; i < ids.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::110 => uint256 low = 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::69 => for (uint256 i = 0; i < defaultOperators_.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Arrays.sol::26 => uint256 low = 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol::43 => uint256 low = 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Multicall.sol::19 => for (uint256 i = 0; i < data.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::46 => uint256 length = 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::58 => for (uint256 i = 0; i < proof.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::71 => for (uint256 i = 0; i < proof.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::117 => uint256 leafPos = 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::118 => uint256 hashPos = 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::119 => uint256 proofPos = 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::125 => for (uint256 i = 0; i < totalHashes; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol::62 => for (uint256 i = 0; i < interfaceIds.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol::86 => for (uint256 i = 0; i < interfaceIds.length; i++) {

 G002:
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::445 => if (a.length == b.length) {
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::446 => for (uint i = 0; i < a.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/Script.sol::18 => // The integer zero is treated as an empty byte string, and as a result it only has a length prefix, 0x80, computed via 0x80 + 0.
  2022-10-traderjoe/lib/forge-std/src/Script.sol::19 => // A one byte integer uses its own value as its length prefix, there is no additional "0x80 + length" prefix that comes before it.
  2022-10-traderjoe/lib/forge-std/src/Script.sol::23 => // Nonces greater than 1 byte all follow a consistent encoding scheme, where each value is preceded by a prefix of 0x80 + length.
  2022-10-traderjoe/lib/forge-std/src/Script.sol::29 => // 0xda = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x84 ++ nonce)
  2022-10-traderjoe/lib/forge-std/src/Script.sol::30 => // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)
  2022-10-traderjoe/lib/forge-std/src/Script.sol::31 => // 0x84 = 0x80 + 0x04 (0x04 = the bytes length of the nonce, 4 bytes, in hex)
  2022-10-traderjoe/lib/forge-std/src/Test.sol::669 => Tx1559[] memory txs = new Tx1559[](rawTxs.length);
  2022-10-traderjoe/lib/forge-std/src/Test.sol::670 => for (uint i; i < rawTxs.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::757 => Receipt[] memory receipts = new Receipt[](rawReceipts.length);
  2022-10-traderjoe/lib/forge-std/src/Test.sol::758 => for (uint i; i < rawReceipts.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::789 => ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);
  2022-10-traderjoe/lib/forge-std/src/Test.sol::790 => for (uint i; i < rawLogs.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::807 => for (uint i=0; i < b.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::808 => number = number + uint(uint8(b[i]))*(2**(8*(b.length-(i+1))));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::897 => if (reads.length == 1) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::908 => } else if (reads.length > 1) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::909 => for (uint256 i = 0; i < reads.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1063 => uint256 max = b.length > 32 ? 32 : b.length;
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1072 => bytes memory result = new bytes(b.length * 32);
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1073 => for (uint256 i = 0; i < b.length; i++) {
  2022-10-traderjoe/lib/forge-std/src/console.sol::8 => uint256 payloadLength = payload.length;
  2022-10-traderjoe/lib/forge-std/src/console2.sol::14 => uint256 payloadLength = payload.length;
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::192 => // store length in memory
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol::46 => return _roleMembers[role].length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::47 => * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::51 => require(payees.length == shares_.length, "PaymentSplitter: payees and shares length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::52 => require(payees.length > 0, "PaymentSplitter: no payees");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::54 => for (uint256 i = 0; i < payees.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::258 => require(targets.length == values.length, "Governor: invalid proposal length");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::259 => require(targets.length == calldatas.length, "Governor: invalid proposal length");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::260 => require(targets.length > 0, "Governor: empty proposal");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::276 => new string[](targets.length),
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::324 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::341 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::528 => if (params.length == 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/IGovernor.sol::240 => * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/IGovernor.sol::265 => * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::91 => for (uint256 i = 0; i < proposers.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::97 => for (uint256 i = 0; i < executors.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::244 => require(targets.length == values.length, "TimelockController: length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::245 => require(targets.length == payloads.length, "TimelockController: length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::249 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::320 => require(targets.length == values.length, "TimelockController: length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::321 => require(targets.length == payloads.length, "TimelockController: length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::326 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::62 => _storeProposal(_msgSender(), targets, values, new string[](calldatas.length), calldatas, description);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::130 => bytes[] memory fullcalldatas = new bytes[](calldatas.length);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::132 => for (uint256 i = 0; i < signatures.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::133 => fullcalldatas[i] = bytes(signatures[i]).length == 0
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::103 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::129 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::148 => for (uint256 i = 0; i < targets.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol::38 => return msg.data[:msg.data.length - 20];
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/CheckpointsImpl.sol::24 => function length() public view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/CheckpointsImpl.sol::25 => return _totalCheckpoints._checkpoints.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ClonesMock.sol::31 => if (initdata.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/DoubleEndedQueueMock.sol::51 => function length() public view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/DoubleEndedQueueMock.sol::52 => return _vector.length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165InterfacesSupported.sol::54 => for (uint256 i = 0; i < interfaceIds.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC3156FlashBorrowerMock.sol::42 => if (data.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::29 => function length() public view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::30 => return _map.length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::72 => function length() public view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::73 => return _map.length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::114 => function length() public view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::115 => return _map.length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::157 => function length() public view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::158 => return _map.length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::200 => function length() public view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::201 => return _map.length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableSetMock.sol::29 => function length() public view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableSetMock.sol::30 => return _set.length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableSetMock.sol::64 => function length() public view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableSetMock.sol::65 => return _set.length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableSetMock.sol::99 => function length() public view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableSetMock.sol::100 => return _set.length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorWithParamsMock.sol::32 => if (params.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorWithParamsMock.sol::46 => if (params.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MulticallTest.sol::13 => bytes[] memory calls = new bytes[](recipients.length);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MulticallTest.sol::14 => for (uint256 i = 0; i < recipients.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MulticallTest.sol::19 => for (uint256 i = 0; i < results.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::75 => uint256 length = 32;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::79 => for (uint256 i = 0; i < length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::88 => uint256 length = 32;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::92 => for (uint256 i = 0; i < length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::101 => uint256 length = 32;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::105 => for (uint256 i = 0; i < length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::114 => uint256 length = 32;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::118 => for (uint256 i = 0; i < length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::127 => uint256 length = 32;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::131 => for (uint256 i = 0; i < length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/StringsMock.sol::16 => function fromUint256HexFixed(uint256 value, uint256 length) public pure returns (string memory) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/StringsMock.sol::17 => return Strings.toHexString(value, length);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/UUPS/UUPSLegacy.sol::29 => if (data.length > 0 || forceCall) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::155 => if (bytes(signature).length == 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::71 => if (data.length > 0 || forceCall) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::181 => if (data.length > 0 || forceCall) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::80 => * - `accounts` and `ids` must have the same length.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::89 => require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::91 => uint256[] memory batchBalances = new uint256[](accounts.length);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::93 => for (uint256 i = 0; i < accounts.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::206 => require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::213 => for (uint256 i = 0; i < ids.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::295 => * - `ids` and `amounts` must have the same length.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::306 => require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::312 => for (uint256 i = 0; i < ids.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::364 => * - `ids` and `amounts` must have the same length.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::372 => require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::378 => for (uint256 i = 0; i < ids.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::414 => * transfers, the length of the `ids` and `amounts` arrays will be 1.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::425 => * - `ids` and `amounts` have the same, non-zero length.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::443 => * transfers, the length of the `id` and `amount` arrays will be 1.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::454 => * - `ids` and `amounts` have the same, non-zero length.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol::61 => * - `accounts` and `ids` must have the same length.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol::114 => * - `ids` and `amounts` must have the same length.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::46 => * @param ids An array containing ids of each token being transferred (order and length must match values array)
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::47 => * @param values An array containing amounts of each token being transferred (order and length must match ids array)
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol::47 => for (uint256 i = 0; i < ids.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol::53 => for (uint256 i = 0; i < ids.length; ++i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol::46 => return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Snapshot.sol::165 => if (index == snapshots.ids.length) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Snapshot.sol::189 => if (ids.length == 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Snapshot.sol::192 => return ids[ids.length - 1];
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::51 => return SafeCast.toUint32(_checkpoints[account].length);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::65 => uint256 pos = _checkpoints[account].length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::109 => uint256 high = ckpts.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::231 => uint256 pos = ckpts.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol::111 => if (returndata.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::97 => return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::155 => //solhint-disable-next-line max-line-length
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::404 => if (reason.length == 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Burnable.sol::22 => //solhint-disable-next-line max-line-length
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol::46 => return _allTokens.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol::97 => uint256 length = ERC721.balanceOf(to);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol::98 => _ownedTokens[to][length] = tokenId;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol::99 => _ownedTokensIndex[tokenId] = length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol::107 => _allTokensIndex[tokenId] = _allTokens.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol::148 => uint256 lastTokenIndex = _allTokens.length - 1;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol::27 => if (bytes(base).length == 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol::31 => if (bytes(_tokenURI).length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol::58 => if (bytes(_tokenURIs[tokenId]).length != 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::69 => for (uint256 i = 0; i < defaultOperators_.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::37 => // This method relies on extcodesize/address.code.length, which returns 0
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::41 => return account.code.length > 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::210 => if (returndata.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Arrays.sol::15 => * values in the array are strictly less than `element`), the array length is
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Arrays.sol::22 => if (array.length == 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Arrays.sol::27 => uint256 high = array.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Base64.sol::25 => if (data.length == 0) return "";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Base64.sol::32 => // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Base64.sol::33 => // - `data.length + 2`  -> Round up
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Base64.sol::36 => string memory result = new string(4 * ((data.length + 2) / 3));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Base64.sol::40 => // Prepare the lookup table (skip the first "length" byte)
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Base64.sol::43 => // Prepare result pointer, jump over length
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol::31 => uint256 pos = self._checkpoints.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol::42 => uint256 high = self._checkpoints.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol::61 => uint256 pos = self._checkpoints.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Create2.sol::37 => require(bytecode.length != 0, "Create2: bytecode length is zero");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Multicall.sol::18 => results = new bytes[](data.length);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Multicall.sol::19 => for (uint256 i = 0; i < data.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::46 => uint256 length = 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::48 => length++;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::51 => return toHexString(value, length);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::55 => * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::57 => function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::58 => bytes memory buffer = new bytes(2 * length + 2);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::61 => for (uint256 i = 2 * length + 1; i > 1; --i) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::65 => require(value == 0, "Strings: hex length insufficient");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::70 => * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::29 => revert("ECDSA: invalid signature length");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::58 => // Check the signature length
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::61 => if (signature.length == 65) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::74 => } else if (signature.length == 64) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::203 => // 32 is the length in bytes of hash,
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::217 => return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::58 => for (uint256 i = 0; i < proof.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::71 => for (uint256 i = 0; i < proof.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::108 => uint256 leavesLen = leaves.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::109 => uint256 totalHashes = proofFlags.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::112 => require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol::38 => return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol::57 => bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol::62 => for (uint256 i = 0; i < interfaceIds.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol::86 => for (uint256 i = 0; i < interfaceIds.length; i++) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol::110 => if (result.length < 32) return false;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol::131 => * `length(deque) - 1`.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol::156 => function length(Bytes32Deque storage deque) internal view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::99 => function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::100 => return map._keys.length();
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::111 => * - `index` must be strictly less than {length}.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::200 => function length(UintToUintMap storage map) internal view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::201 => return length(map._inner);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::211 => * - `index` must be strictly less than {length}.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::292 => function length(UintToAddressMap storage map) internal view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::293 => return length(map._inner);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::303 => * - `index` must be strictly less than {length}.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::386 => function length(AddressToUintMap storage map) internal view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::387 => return length(map._inner);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::397 => * - `index` must be strictly less than {length}.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::478 => function length(Bytes32ToUintMap storage map) internal view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::479 => return length(map._inner);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::489 => * - `index` must be strictly less than {length}.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::65 => // The value is stored at length-1, but we add 1 to all indexes
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::67 => set._indexes[value] = set._values.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::91 => uint256 lastIndex = set._values.length - 1;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::124 => function _length(Set storage set) private view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::125 => return set._values.length;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::136 => * - `index` must be strictly less than {length}.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::190 => function length(Bytes32Set storage set) internal view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::191 => return _length(set._inner);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::202 => * - `index` must be strictly less than {length}.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::256 => function length(AddressSet storage set) internal view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::257 => return _length(set._inner);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::268 => * - `index` must be strictly less than {length}.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::330 => function length(UintSet storage set) internal view returns (uint256) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::331 => return _length(set._inner);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::342 => * - `index` must be strictly less than {length}.
  2022-10-traderjoe/src/LBFactory.sol::73 => return allLBPairs.length;
  2022-10-traderjoe/src/LBFactory.sol::79 => return _quoteAssetWhitelist.length();
  2022-10-traderjoe/src/LBFactory.sol::291 => emit LBPairCreated(_tokenX, _tokenY, _binStep, _LBPair, allLBPairs.length - 1);
  2022-10-traderjoe/src/LBPair.sol::274 => for (uint256 i; i < _ids.length; ++i) {
  2022-10-traderjoe/src/LBPair.sol::481 => if (_ids.length == 0 || _ids.length != _distributionX.length || _ids.length != _distributionY.length)
  2022-10-traderjoe/src/LBPair.sol::493 => liquidityMinted = new uint256[](_ids.length);
  2022-10-traderjoe/src/LBPair.sol::496 => for (uint256 i; i < _ids.length; ++i) {
  2022-10-traderjoe/src/LBPair.sol::623 => for (uint256 i; i < _ids.length; ++i) {
  2022-10-traderjoe/src/LBPair.sol::677 => /// @notice Increase the length of the oracle
  2022-10-traderjoe/src/LBPair.sol::701 => for (uint256 i; i < _ids.length; ++i) {
  2022-10-traderjoe/src/LBQuoter.sol::59 => if (_route.length < 2) {
  2022-10-traderjoe/src/LBQuoter.sol::65 => uint256 swapLength = _route.length - 1;
  2022-10-traderjoe/src/LBQuoter.sol::69 => quote.amounts = new uint256[](_route.length);
  2022-10-traderjoe/src/LBQuoter.sol::70 => quote.virtualAmountsWithoutSlippage = new uint256[](_route.length);
  2022-10-traderjoe/src/LBQuoter.sol::99 => if (LBPairsAvailable.length > 0 && quote.amounts[i] > 0) {
  2022-10-traderjoe/src/LBQuoter.sol::100 => for (uint256 j; j < LBPairsAvailable.length; j++) {
  2022-10-traderjoe/src/LBQuoter.sol::139 => if (_route.length < 2) {
  2022-10-traderjoe/src/LBQuoter.sol::144 => uint256 swapLength = _route.length - 1;
  2022-10-traderjoe/src/LBQuoter.sol::148 => quote.amounts = new uint256[](_route.length);
  2022-10-traderjoe/src/LBQuoter.sol::149 => quote.virtualAmountsWithoutSlippage = new uint256[](_route.length);
  2022-10-traderjoe/src/LBQuoter.sol::176 => if (LBPairsAvailable.length > 0 && quote.amounts[i] > 0) {
  2022-10-traderjoe/src/LBQuoter.sol::177 => for (uint256 j; j < LBPairsAvailable.length; j++) {
  2022-10-traderjoe/src/LBRouter.sol::43 => if (_pairBinSteps.length == 0 || _pairBinSteps.length + 1 != _tokenPath.length)
  2022-10-traderjoe/src/LBRouter.sol::385 => if (_tokenPath[_pairBinSteps.length] != IERC20(wavax))
  2022-10-traderjoe/src/LBRouter.sol::386 => revert LBRouter__InvalidTokenPath(address(_tokenPath[_pairBinSteps.length]));
  2022-10-traderjoe/src/LBRouter.sol::467 => if (_tokenPath[_pairBinSteps.length] != IERC20(wavax))
  2022-10-traderjoe/src/LBRouter.sol::468 => revert LBRouter__InvalidTokenPath(address(_tokenPath[_pairBinSteps.length]));
  2022-10-traderjoe/src/LBRouter.sol::541 => IERC20 _targetToken = _tokenPath[_pairs.length];
  2022-10-traderjoe/src/LBRouter.sol::569 => if (_tokenPath[_pairBinSteps.length] != IERC20(wavax))
  2022-10-traderjoe/src/LBRouter.sol::570 => revert LBRouter__InvalidTokenPath(address(_tokenPath[_pairBinSteps.length]));
  2022-10-traderjoe/src/LBRouter.sol::605 => IERC20 _targetToken = _tokenPath[_pairs.length];
  2022-10-traderjoe/src/LBRouter.sol::662 => if (_liq.deltaIds.length != _liq.distributionX.length && _liq.deltaIds.length != _liq.distributionY.length)
  2022-10-traderjoe/src/LBRouter.sol::673 => depositIds = new uint256[](_liq.deltaIds.length);
  2022-10-traderjoe/src/LBRouter.sol::674 => for (uint256 i; i < depositIds.length; ++i) {
  2022-10-traderjoe/src/LBRouter.sol::707 => amountsIn = new uint256[](_tokenPath.length);
  2022-10-traderjoe/src/LBRouter.sol::708 => // Avoid doing -1, as `_pairs.length == _pairBinSteps.length-1`
  2022-10-traderjoe/src/LBRouter.sol::709 => amountsIn[_pairs.length] = _amountOut;
  2022-10-traderjoe/src/LBRouter.sol::711 => for (uint256 i = _pairs.length; i != 0; i--) {
  2022-10-traderjoe/src/LBRouter.sol::778 => for (uint256 i; i < _pairs.length; ++i) {
  2022-10-traderjoe/src/LBRouter.sol::785 => _recipient = i + 1 == _pairs.length ? _to : _pairs[i + 1];
  2022-10-traderjoe/src/LBRouter.sol::831 => for (uint256 i; i < _pairs.length; ++i) {
  2022-10-traderjoe/src/LBRouter.sol::838 => _recipient = i + 1 == _pairs.length ? _to : _pairs[i + 1];
  2022-10-traderjoe/src/LBRouter.sol::878 => for (uint256 i; i < _pairs.length; ++i) {
  2022-10-traderjoe/src/LBRouter.sol::885 => _recipient = i + 1 == _pairs.length ? _to : _pairs[i + 1];
  2022-10-traderjoe/src/LBRouter.sol::946 => pairs = new address[](_pairBinSteps.length);
  2022-10-traderjoe/src/LBRouter.sol::951 => for (uint256 i; i < pairs.length; ++i) {
  2022-10-traderjoe/src/LBToken.sol::42 => modifier checkLength(uint256 _lengthA, uint256 _lengthB) {
  2022-10-traderjoe/src/LBToken.sol::43 => if (_lengthA != _lengthB) revert LBToken__LengthMismatch(_lengthA, _lengthB);
  2022-10-traderjoe/src/LBToken.sol::84 => checkLength(_accounts.length, _ids.length)
  2022-10-traderjoe/src/LBToken.sol::87 => batchBalances = new uint256[](_accounts.length);
  2022-10-traderjoe/src/LBToken.sol::90 => for (uint256 i; i < _accounts.length; ++i) {
  2022-10-traderjoe/src/LBToken.sol::108 => return _userIds[_account].length();
  2022-10-traderjoe/src/LBToken.sol::158 => checkLength(_ids.length, _amounts.length)
  2022-10-traderjoe/src/LBToken.sol::163 => for (uint256 i; i < _ids.length; ++i) {
  2022-10-traderjoe/src/libraries/TokenHelper.sol::76 => if (!(success && (result.length == 0 || abi.decode(result, (bool))))) {
  2022-10-traderjoe/test/LBFactory.MultiPools.t.sol::111 => assertEq(binSteps.length, 3);
  2022-10-traderjoe/test/LBFactory.MultiPools.t.sol::118 => assertEq(binSteps.length, 4);
  2022-10-traderjoe/test/LBFactory.MultiPools.t.sol::126 => assertEq(binSteps.length, 3);
  2022-10-traderjoe/test/LBFactory.MultiPools.t.sol::137 => assertEq(LBPairBinSteps.length, 3);
  2022-10-traderjoe/test/LBFactory.MultiPools.t.sol::146 => assertEq(LBPairBinStepsReversed.length, 3);
  2022-10-traderjoe/test/LBFactory.MultiPools.t.sol::158 => assertEq(LBPairBinStepsAfterPresetRemoval.length, 3);
  2022-10-traderjoe/test/LBFactory.MultiPools.t.sol::167 => assertEq(LBPairBinStepsAfterIgnored.length, 3);
  2022-10-traderjoe/test/LBFactory.MultiPools.t.sol::178 => assertEq(LBPairBinStepsAfterRemovalOfIgnored.length, 3);
  2022-10-traderjoe/test/LBFactory.t.sol::59 => assertEq(factory.getAllLBPairs(token6D, token18D).length, 0);
  2022-10-traderjoe/test/LBFactory.t.sol::61 => assertEq(factory.getAllLBPairs(token6D, token18D).length, 1);
  2022-10-traderjoe/test/LBFactory.t.sol::64 => assertEq(factory.getAllLBPairs(token6D, token18D).length, 2);
  2022-10-traderjoe/test/LBFactory.t.sol::81 => assertEq(factory.getAllLBPairs(token6D, token18D).length, 3);
  2022-10-traderjoe/test/LBFactory.t.sol::154 => assertEq(LBPairBinSteps.length, 1);
  2022-10-traderjoe/test/LBToken.t.sol::202 => vm.expectRevert(abi.encodeWithSelector(LBToken__LengthMismatch.selector, _ids.length, amounts.length));
  2022-10-traderjoe/test/LBToken.t.sol::209 => vm.expectRevert(abi.encodeWithSelector(LBToken__LengthMismatch.selector, accounts.length, _ids.length));
  2022-10-traderjoe/test/mocks/Faucet.sol::71 => return faucetTokens.length;
  2022-10-traderjoe/test/mocks/Faucet.sol::108 => uint256 lastIndex = faucetTokens.length - 1;
  2022-10-traderjoe/test/mocks/Faucet.sol::160 => uint256 len = faucetTokens.length;
  2022-10-traderjoe/test/mocks/Faucet.sol::183 => tokenToIndices[_token.ERC20] = faucetTokens.length;

 G003:
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::83 => return hevmCodeSize > 0;
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1101 => return uint256(a > 0 ? a : -a);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::52 => require(payees.length > 0, "PaymentSplitter: no payees");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::145 => require(_shares[account] > 0, "PaymentSplitter: account has no shares");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::164 => require(_shares[account] > 0, "PaymentSplitter: account has no shares");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::196 => require(shares_ > 0, "PaymentSplitter: shares are 0");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::260 => require(targets.length > 0, "Governor: empty proposal");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::135 => return getTimestamp(id) > 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol::100 => require(newVotingPeriod > 0, "GovernorSettings: voting period too low");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::127 => require(eta > 0, "GovernorTimelockCompound: proposal not yet queued");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::147 => if (eta > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/utils/Votes.sol::161 => if (from != to && amount > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ClonesMock.sol::31 => if (initdata.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC3156FlashBorrowerMock.sol::42 => if (data.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorWithParamsMock.sol::32 => if (params.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorWithParamsMock.sol::46 => if (params.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol::20 => if (n > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol::27 => if (n > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/UUPS/UUPSLegacy.sol::29 => if (data.length > 0 || forceCall) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::71 => if (data.length > 0 || forceCall) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::181 => if (data.length > 0 || forceCall) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol::30 => return ERC1155Supply.totalSupply(id) > 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol::46 => return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Capped.sol::19 => require(cap_ > 0, "ERC20Capped: cap is 0");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Snapshot.sol::146 => require(snapshotId > 0, "ERC20Snapshot: id is 0");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::213 => if (src != dst && amount > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::235 => if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol::144 => * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol::215 => return totalAssets() > 0 || totalSupply() == 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol::111 => if (returndata.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/TokenTimelock.sol::72 => require(amount > 0, "TokenTimelock: no tokens to release");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::97 => return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol::31 => if (bytes(_tokenURI).length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::41 => return account.code.length > 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::210 => if (returndata.length > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Arrays.sol::42 => if (low > 0 && array[low - 1] == element) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol::63 => if (pos > 0 && self._checkpoints[pos - 1]._blockNumber == block.number) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Counters.sol::34 => require(value > 0, "Counter: decrement overflow");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Timers.sol::31 => return timer._deadline > 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Timers.sol::63 => return timer._deadline > 0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::163 => if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::131 => if (totalHashes > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::133 => } else if (leavesLen > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::147 => if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::172 => if (x >> 128 > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::176 => if (x >> 64 > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::180 => if (x >> 32 > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::184 => if (x >> 16 > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::188 => if (x >> 8 > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::192 => if (x >> 4 > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::196 => if (x >> 2 > 0) {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol::197 => require(b > 0, errorMessage);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol::223 => require(b > 0, errorMessage);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/optimism/ICrossDomainMessenger.sol::3 => pragma solidity >0.5.0 <0.9.0;
  2022-10-traderjoe/src/LBFactory.sol::161 => if (_nbPresets > 0) {
  2022-10-traderjoe/src/LBFactory.sol::191 => if (_nbAvailable > 0) {
  2022-10-traderjoe/src/LBQuoter.sol::79 => if (quote.pairs[i] != address(0) && quote.amounts[i] > 0) {
  2022-10-traderjoe/src/LBQuoter.sol::82 => if (reserveIn > 0 && reserveOut > 0) {
  2022-10-traderjoe/src/LBQuoter.sol::99 => if (LBPairsAvailable.length > 0 && quote.amounts[i] > 0) {
  2022-10-traderjoe/src/LBQuoter.sol::154 => for (uint256 i = swapLength; i > 0; i--) {
  2022-10-traderjoe/src/LBQuoter.sol::157 => if (quote.pairs[i - 1] != address(0) && quote.amounts[i] > 0) {
  2022-10-traderjoe/src/LBQuoter.sol::160 => if (reserveIn > 0 && reserveOut > quote.amounts[i]) {
  2022-10-traderjoe/src/LBQuoter.sol::176 => if (LBPairsAvailable.length > 0 && quote.amounts[i] > 0) {
  2022-10-traderjoe/src/libraries/Math128x128.sol::71 => for (int256 delta = int256(1 << (LOG_SCALE_OFFSET - 1)); delta > 0; delta >>= 1) {
  2022-10-traderjoe/test/LBFactory.t.sol::413 => vm.assume(baseFactorIncrement > 0);
  2022-10-traderjoe/test/LBFactory.t.sol::438 => vm.assume(maxVolatilityIncrement > 0);
  2022-10-traderjoe/test/LBPair.Fees.t.sol::226 => vm.assume(amountY > 0);
  2022-10-traderjoe/test/LBPair.Fees.t.sol::228 => vm.assume(amountX > 0);
  2022-10-traderjoe/test/LBTokenInternal.t.sol::47 => vm.assume(excessiveBurnAmount > 0);
  2022-10-traderjoe/test/LBTokenInternal.t.sol::56 => vm.assume(mintAmount > 0 && burnAmount > 0);
  2022-10-traderjoe/test/TestHelper.sol::167 => amountXIn += binLiquidity > 0
  2022-10-traderjoe/test/mocks/Faucet.sol::164 => if (token.amountPerRequest > 0 && address(this).balance >= token.amountPerRequest) {
  2022-10-traderjoe/test/mocks/Faucet.sol::171 => if (token.amountPerRequest > 0 && token.ERC20.balanceOf(address(this)) >= token.amountPerRequest)

 G006:
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::42 => address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::55 => bytes4(keccak256("load(address,bytes32)")),
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::69 => bytes4(keccak256("store(address,bytes32,bytes32)")),
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::429 => if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::437 => if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {
  2022-10-traderjoe/lib/forge-std/src/Script.sol::11 => address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));
  2022-10-traderjoe/lib/forge-std/src/Script.sol::20 => if (nonce == 0x00)             return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployer, bytes1(0x80))));
  2022-10-traderjoe/lib/forge-std/src/Script.sol::21 => if (nonce <= 0x7f)             return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployer, uint8(nonce))));
  2022-10-traderjoe/lib/forge-std/src/Script.sol::24 => if (nonce <= 2**8 - 1)  return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd7), bytes1(0x94), deployer, bytes1(0x81), uint8(nonce))));
  2022-10-traderjoe/lib/forge-std/src/Script.sol::25 => if (nonce <= 2**16 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd8), bytes1(0x94), deployer, bytes1(0x82), uint16(nonce))));
  2022-10-traderjoe/lib/forge-std/src/Script.sol::26 => if (nonce <= 2**24 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd9), bytes1(0x94), deployer, bytes1(0x83), uint24(nonce))));
  2022-10-traderjoe/lib/forge-std/src/Script.sol::33 => return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xda), bytes1(0x94), deployer, bytes1(0x84), uint32(nonce))));
  2022-10-traderjoe/lib/forge-std/src/StdJson.sol::10 => Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::92 => privateKey = uint256(keccak256(abi.encodePacked(name)));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::285 => if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::294 => if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::303 => if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::312 => if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::319 => if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::327 => if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::855 => Vm private constant vm_std_store = Vm(address(uint160(uint256(keccak256('hevm cheat code')))));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::864 => return bytes4(keccak256(bytes(sigStr)));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::870 => //  if map, will be keccak256(abi.encode(key, uint(slot)));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::871 => //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::872 => //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);
  2022-10-traderjoe/lib/forge-std/src/Test.sol::885 => if (self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::886 => return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];
  2022-10-traderjoe/lib/forge-std/src/Test.sol::905 => emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[0]));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::906 => self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[0]);
  2022-10-traderjoe/lib/forge-std/src/Test.sol::907 => self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;
  2022-10-traderjoe/lib/forge-std/src/Test.sol::925 => emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[i]));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::926 => self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[i]);
  2022-10-traderjoe/lib/forge-std/src/Test.sol::927 => self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;
  2022-10-traderjoe/lib/forge-std/src/Test.sol::937 => require(self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))], "stdStorage find(StdStorage): Slot(s) not found.");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::944 => return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1008 => if (!self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1011 => bytes32 slot = bytes32(self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]);
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::86 => vm.assume(keccak256(a) != keccak256(b));
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::98 => vm.assume(keccak256(a) != keccak256(b));
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::76 => bytes32 hash = keccak256("some_message");
  2022-10-traderjoe/lib/forge-std/src/test/StdError.t.sol::102 => keccak256(someBytes);
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::16 => assertEq(uint256(keccak256("my.random.var")), stdstore.target(address(test)).sig("hidden()").find());
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::40 => assertEq(uint256(keccak256(abi.encode(address(this), 4))), slot);
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::50 => assertEq(uint256(keccak256(abi.encode(address(this), 4))) + 1, slot);
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::60 => assertEq(uint256(keccak256(abi.encode(address(this), keccak256(abi.encode(address(this), uint(5)))))), slot);
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::81 => assertEq(bytes32(uint256(keccak256(abi.encode(address(this), keccak256(abi.encode(address(this), uint(6)))))) + 0), bytes32(slot));
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::92 => assertEq(bytes32(uint256(keccak256(abi.encode(address(this), keccak256(abi.encode(address(this), uint(6)))))) + 1), bytes32(slot));
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::171 => assertEq(uint256(keccak256(abi.encode(address(this), uint(1)))), slot);
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::176 => assertEq(uint256(keccak256(abi.encode(100, uint(2)))), slot);
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::208 => // vm.expectRevert(abi.encodeWithSignature("NotStorage(bytes4)", bytes4(keccak256("const()"))));
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::311 => bytes32 slot = keccak256("my.random.var");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControl.sol::23 => * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControlCrossChain.sol::26 => bytes32 public constant CROSSCHAIN_ALIAS = keccak256("CROSSCHAIN_ALIAS");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::34 => bytes32 public constant BALLOT_TYPEHASH = keccak256("Ballot(uint256 proposalId,uint8 support)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::36 => keccak256("ExtendedBallot(uint256 proposalId,uint8 support,string reason,bytes params)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::68 => bytes32 msgDataHash = keccak256(_msgData());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::124 => * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::139 => return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::256 => uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::343 => _governanceCall.pushBack(keccak256(calldatas[i]));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::454 => _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::476 => keccak256(
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::481 => keccak256(bytes(reason)),
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::482 => keccak256(params)
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::27 => bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256("TIMELOCK_ADMIN_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::28 => bytes32 public constant PROPOSER_ROLE = keccak256("PROPOSER_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::29 => bytes32 public constant EXECUTOR_ROLE = keccak256("EXECUTOR_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::30 => bytes32 public constant CANCELLER_ROLE = keccak256("CANCELLER_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::188 => return keccak256(abi.encode(target, value, data, predecessor, salt));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::202 => return keccak256(abi.encode(targets, values, payloads, predecessor, salt));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::135 => : abi.encodePacked(bytes4(keccak256(bytes(signatures[i]))), calldatas[i]);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::152 => bytes32 descriptionHash = keccak256(bytes(description));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::105 => !_timelock.queuedTransactions(keccak256(abi.encode(targets[i], values[i], "", calldatas[i], eta))),
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/utils/Votes.sol::36 => keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/utils/Votes.sol::113 => _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol::13 => *   bytes4(keccak256('transferAndCall(address,uint256)')) ^
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol::14 => *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol::15 => *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol::16 => *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol::22 => *   bytes4(keccak256('approveAndCall(address,uint256)')) ^
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol::23 => *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Receiver.sol::9 => * 0x88a7ca5c === bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Receiver.sol::23 => * @return `bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))`
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Spender.sol::9 => * 0x7b04a2d0 === bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Spender.sol::22 => * @return `bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))`
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol::20 => * @return The keccak256 hash of "IERC3156FlashBorrower.onFlashLoan"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/metatx/MinimalForwarder.sol::30 => keccak256("ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/metatx/MinimalForwarder.sol::42 => keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.gas, req.nonce, keccak256(req.data)))
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EIP712External.sol::22 => keccak256(abi.encode(keccak256("Mail(address to,string contents)"), mailTo, keccak256(bytes(mailContents))))
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165InterfacesSupported.sol::19 => * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC3156FlashBorrowerMock.sol::17 => bytes32 internal constant _RETURN_VALUE = keccak256("ERC3156FlashBorrower.onFlashLoan");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol::45 => bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256("ERC777TokensSender");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol::46 => bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256("ERC777TokensRecipient");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol::36 => bytes4 func = bytes4(keccak256("callback()"));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::115 => bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::131 => bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::146 => bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::158 => callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/Clones.sol::72 => mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/Clones.sol::73 => predicted := keccak256(add(ptr, 0x37), 0x55)
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::20 => // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::25 => * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::103 => * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::140 => * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol::13 => * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol::23 => // bytes4(keccak256("implementation()")) == 0x5c60da1b
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol::38 => // bytes4(keccak256("admin()")) == 0xf851a440
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::17 => * `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::25 => * @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::41 => * `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::49 => * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::29 => bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::30 => bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20FlashMint.sol::20 => bytes32 private constant _RETURN_VALUE = keccak256("ERC3156FlashBorrower.onFlashLoan");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::34 => keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::143 => _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol::29 => keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol::60 => bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol::29 => bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol::30 => bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::40 => bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::41 => bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::41 => bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256("ERC777TokensSender");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::42 => bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256("ERC777TokensRecipient");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::74 => _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC777Token"), address(this));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::75 => _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC20Token"), address(this));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Create2.sol::63 => bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::205 => return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::217 => return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::230 => return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::11 => * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::16 => * hashing, or use a hash function other than keccak256 for hashing leaves.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::149 => value := keccak256(0x00, 0x40)
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol::13 => * they need in their contracts using a combination of `abi.encode` and `keccak256`.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol::54 => bytes32 hashedName = keccak256(bytes(name));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol::55 => bytes32 hashedVersion = keccak256(bytes(version));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol::56 => bytes32 typeHash = keccak256(
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol::83 => return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol::93 => * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol::94 => *     keccak256("Mail(address to,string contents)"),
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol::96 => *     keccak256(bytes(mailContents))
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC1820Implementer.sol::17 => bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256("ERC1820_ACCEPT_MAGIC");
  2022-10-traderjoe/src/LBFactory.sol::265 => bytes32 _salt = keccak256(abi.encode(_tokenA, _tokenB, _binStep));
  2022-10-traderjoe/src/LBPair.sol::657 => let slot := keccak256(0, 64)
  2022-10-traderjoe/src/LBPair.sol::1001 => _data := sload(keccak256(0, 64))
  2022-10-traderjoe/test/Faucet.t.sol::13 => address internal constant ALICE = address(bytes20(bytes32(keccak256(bytes("ALICE")))));
  2022-10-traderjoe/test/Faucet.t.sol::14 => address internal constant BOB = address(bytes20(bytes32(keccak256(bytes("BOB")))));
  2022-10-traderjoe/test/Faucet.t.sol::15 => address internal constant OPERATOR = address(bytes20(bytes32(keccak256(bytes("OPERATOR")))));

 G007:
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::20 => emit log("-- log_named_address(string, address)");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::23 => emit log("-- log_named_bytes32(string, bytes32)");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::26 => emit log("-- log_named_bytes(string, bytes)");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::29 => emit log("-- log_named_string(string, string)");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::32 => emit log("-- log_named_decimal_uint(string, uint, uint)");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::35 => emit log("-- log_named_decimal_int(string, int, uint)");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::93 => emit log("\n## assertEq32(bytes32,bytes32)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::113 => emit log("\n## assertEqDecimal(int,int,uint)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::118 => emit log("\n## assertEqDecimal(uint,uint,uint)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::133 => emit log("\n## assertGtDecimal(int,int,uint)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::138 => emit log("\n## assertGtDecimal(uint,uint,uint)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::153 => emit log("\n## assertGeDecimal(int,int,uint)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::158 => emit log("\n## assertGeDecimal(uint,uint,uint)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::173 => emit log("\n## assertLtDecimal(int,int,uint)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::178 => emit log("\n## assertLtDecimal(uint,uint,uint)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::193 => emit log("\n## assertLeDecimal(int,int,uint)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::198 => emit log("\n## assertLeDecimal(uint,uint,uint)\n");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::109 => emit log("Error: a == b not satisfied [address]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::124 => emit log("Error: a == b not satisfied [bytes32]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::145 => emit log("Error: a == b not satisfied [int]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::159 => emit log("Error: a == b not satisfied [uint]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::173 => emit log("Error: a == b not satisfied [decimal int]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::187 => emit log("Error: a == b not satisfied [decimal uint]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::202 => emit log("Error: a > b not satisfied [uint]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::230 => emit log("Error: a > b not satisfied [decimal int]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::244 => emit log("Error: a > b not satisfied [decimal uint]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::259 => emit log("Error: a >= b not satisfied [uint]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::273 => emit log("Error: a >= b not satisfied [int]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::287 => emit log("Error: a >= b not satisfied [decimal int]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::301 => emit log("Error: a >= b not satisfied [decimal uint]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::316 => emit log("Error: a < b not satisfied [uint]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::344 => emit log("Error: a < b not satisfied [decimal int]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::358 => emit log("Error: a < b not satisfied [decimal uint]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::373 => emit log("Error: a <= b not satisfied [uint]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::387 => emit log("Error: a <= b not satisfied [int]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::401 => emit log("Error: a <= b not satisfied [decimal int]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::415 => emit log("Error: a <= b not satisfied [decimal uint]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::430 => emit log("Error: a == b not satisfied [string]");
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::457 => emit log("Error: a == b not satisfied [bytes]");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::104 => emit log_named_string("WARNING", "Test tip(address,address,uint256): The `tip` stdcheat has been deprecated. Use `deal` instead.");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::153 => require(min <= max, "Test bound(uint256,uint256,uint256): Max is less than min.");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::190 => "Test deployCode(string,bytes): Deployment failed."
  2022-10-traderjoe/lib/forge-std/src/Test.sol::206 => "Test deployCode(string): Deployment failed."
  2022-10-traderjoe/lib/forge-std/src/Test.sol::223 => "Test deployCode(string,bytes,uint256): Deployment failed."
  2022-10-traderjoe/lib/forge-std/src/Test.sol::239 => "Test deployCode(string,uint256): Deployment failed."
  2022-10-traderjoe/lib/forge-std/src/Test.sol::262 => emit log                ("Error: a == b not satisfied [bool]");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::286 => emit log("Error: a == b not satisfied [uint[]]");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::295 => emit log("Error: a == b not satisfied [int[]]");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::304 => emit log("Error: a == b not satisfied [address[]]");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::341 => emit log            ("Error: a ~= b not satisfied [uint]");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::372 => emit log            ("Error: a ~= b not satisfied [int]");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::405 => emit log                    ("Error: a ~= b not satisfied [uint]");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::440 => emit log                   ("Error: a ~= b not satisfied [int]");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::723 => string memory key = string(abi.encodePacked(".transactions[",vm.toString(index), "]"));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::747 => string memory key = string(abi.encodePacked(".receipts[",vm.toString(index), "]"));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::903 => require(false, "stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::934 => require(false, "stdStorage find(StdStorage): No storage use detected for target.");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::937 => require(self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))], "stdStorage find(StdStorage): Slot(s) not found.");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1021 => require(false, "stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.");
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1045 => revert("stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.");
  2022-10-traderjoe/lib/forge-std/src/console.sol::762 => _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::858 => _sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::882 => _sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::890 => _sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::978 => _sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::986 => _sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1010 => _sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1018 => _sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1274 => _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1338 => _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1362 => _sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1370 => _sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1394 => _sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1402 => _sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1466 => _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1482 => _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1490 => _sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1498 => _sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1514 => _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1518 => _sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1522 => _sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1526 => _sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console.sol::1530 => _sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::515 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::519 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::523 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,bool)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::527 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::531 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::535 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::543 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::547 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::559 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::563 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::567 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::571 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,bool)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::575 => _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::579 => _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::583 => _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::591 => _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::595 => _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::599 => _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::607 => _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::627 => _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::631 => _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::639 => _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::643 => _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::655 => _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::691 => _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::703 => _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::707 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::711 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::715 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,bool)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::719 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::723 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::727 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::735 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::739 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::751 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::755 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::759 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::763 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,bool)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::767 => _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::771 => _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::775 => _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::783 => _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::787 => _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::791 => _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::799 => _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::819 => _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::823 => _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::831 => _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::835 => _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::839 => _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::847 => _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::851 => _sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::863 => _sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::883 => _sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::887 => _sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::895 => _sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::963 => _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::967 => _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::975 => _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::979 => _sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::983 => _sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::991 => _sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1011 => _sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1015 => _sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1023 => _sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1027 => _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1039 => _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1075 => _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1087 => _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1219 => _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1231 => _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1267 => _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1279 => _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1283 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1287 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1291 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,bool)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1295 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1299 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1303 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1311 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1315 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1327 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1331 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1335 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1339 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,bool)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1343 => _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1347 => _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1351 => _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1359 => _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1363 => _sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1367 => _sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1375 => _sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1395 => _sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1399 => _sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1407 => _sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1411 => _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1423 => _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1459 => _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1471 => _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1475 => _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1479 => _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1483 => _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,bool)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1487 => _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1491 => _sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1495 => _sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1503 => _sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1507 => _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1519 => _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1523 => _sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint256)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1527 => _sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1531 => _sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/console2.sol::1535 => _sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::61 => emit log("Error: a == b not satisfied [bool]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::89 => emit log("Error: a == b not satisfied [bytes]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::155 => emit log("Error: a == b not satisfied [uint[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::166 => emit log("Error: a == b not satisfied [int[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::178 => emit log("Error: a == b not satisfied [address[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::191 => emit log("Error: a == b not satisfied [uint[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::204 => emit log("Error: a == b not satisfied [int[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::218 => emit log("Error: a == b not satisfied [address[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::230 => emit log("Error: a == b not satisfied [uint[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::242 => emit log("Error: a == b not satisfied [int[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::254 => emit log("Error: a == b not satisfied [address[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::268 => emit log("Error: a == b not satisfied [uint[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::282 => emit log("Error: a == b not satisfied [int[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::296 => emit log("Error: a == b not satisfied [address[]]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::314 => emit log("Error: a ~= b not satisfied [uint]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::346 => emit log("Error: a ~= b not satisfied [int]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::380 => emit log("Error: a ~= b not satisfied [uint]");
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::416 => emit log("Error: a ~= b not satisfied [int]");
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::115 => vm.expectRevert(bytes("Test bound(uint256,uint256,uint256): Max is less than min."));
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::143 => vm.expectRevert(bytes("Test bound(uint256,uint256,uint256): Max is less than min."));
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::148 => address deployed = deployCode("StdCheats.t.sol:StdCheatsTest", bytes(""));
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::161 => address deployed = deployCode("StdCheats.t.sol:StdCheatsTest", bytes(""), 1 ether);
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::172 => // We need this so we can call "this.deployCode" rather than "deployCode" directly
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::178 => vm.expectRevert(bytes("Test deployCode(string): Deployment failed."));
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::179 => this.deployCodeHelper("StdCheats.t.sol:RevertingContract");
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::208 => string memory path = string.concat(root, "/src/test/fixtures/broadcast.log.json");
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::224 => string memory path = string.concat(root, "/src/test/fixtures/broadcast.log.json");
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::231 => string memory path = string.concat(root, "/src/test/fixtures/broadcast.log.json");
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::237 => string memory path = string.concat(root, "/src/test/fixtures/broadcast.log.json");
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::241 => hex
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::246 => string memory path = string.concat(root, "/src/test/fixtures/broadcast.log.json");
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::16 => assertEq(uint256(keccak256("my.random.var")), stdstore.target(address(test)).sig("hidden()").find());
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::208 => // vm.expectRevert(abi.encodeWithSignature("NotStorage(bytes4)", bytes4(keccak256("const()"))));
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::237 => vm.expectRevert("stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.");
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/ERC20VotesHarness.sol::1 => import "../munged/token/ERC20/extensions/ERC20Votes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardControlFirstPriority.sol::4 => import "../munged/governance/Governor.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardControlFirstPriority.sol::5 => import "../munged/governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardControlFirstPriority.sol::6 => import "../munged/governance/extensions/GovernorVotes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardControlFirstPriority.sol::7 => import "../munged/governance/extensions/GovernorVotesQuorumFraction.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardControlFirstPriority.sol::8 => import "../munged/governance/extensions/GovernorTimelockControl.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardControlFirstPriority.sol::9 => import "../munged/governance/extensions/GovernorProposalThreshold.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardFirstTry.sol::4 => import "../munged/governance/Governor.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardFirstTry.sol::5 => import "../munged/governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardFirstTry.sol::6 => import "../munged/governance/extensions/GovernorVotes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardFirstTry.sol::7 => import "../munged/governance/extensions/GovernorVotesQuorumFraction.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardFirstTry.sol::8 => import "../munged/governance/extensions/GovernorTimelockCompound.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControl.sol::9 => import "../utils/introspection/ERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControl.sol::180 => require(account == _msgSender(), "AccessControl: can only renounce roles for self");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControlCrossChain.sol::7 => import "../crosschain/CrossChainEnabled.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol::8 => import "../utils/structs/EnumerableSet.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/Ownable.sol::70 => require(newOwner != address(0), "Ownable: new owner is the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/LibArbitrumL1.sol::6 => import {IBridge as ArbitrumL1_Bridge} from "../../vendor/arbitrum/IBridge.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/LibArbitrumL1.sol::8 => import {IOutbox as ArbitrumL1_Outbox} from "../../vendor/arbitrum/IOutbox.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/LibArbitrumL1.sol::39 => require(sender != address(0), "LibArbitrumL1: system messages without sender");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/LibArbitrumL2.sol::6 => import {IArbSys as ArbitrumL2_Bridge} from "../../vendor/arbitrum/IArbSys.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/optimism/LibOptimism.sol::6 => import {ICrossDomainMessenger as Optimism_Bridge} from "../../vendor/optimism/ICrossDomainMessenger.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/polygon/CrossChainEnabledPolygonChild.sol::7 => import "../../security/ReentrancyGuard.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/polygon/CrossChainEnabledPolygonChild.sol::9 => import "../../vendor/polygon/IFxMessageProcessor.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::6 => import "../token/ERC20/utils/SafeERC20.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::51 => require(payees.length == shares_.length, "PaymentSplitter: payees and shares length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::145 => require(_shares[account] > 0, "PaymentSplitter: account has no shares");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::149 => require(payment != 0, "PaymentSplitter: account is not due payment");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::164 => require(_shares[account] > 0, "PaymentSplitter: account has no shares");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::168 => require(payment != 0, "PaymentSplitter: account is not due payment");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::195 => require(account != address(0), "PaymentSplitter: account is the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::197 => require(_shares[account] == 0, "PaymentSplitter: account already has shares");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/VestingWallet.sol::5 => import "../token/ERC20/utils/SafeERC20.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/VestingWallet.sol::38 => require(beneficiaryAddress != address(0), "VestingWallet: beneficiary is zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::6 => import "../token/ERC721/IERC721Receiver.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::7 => import "../token/ERC1155/IERC1155Receiver.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::9 => import "../utils/cryptography/draft-EIP712.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::10 => import "../utils/introspection/ERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::12 => import "../utils/structs/DoubleEndedQueue.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::34 => bytes32 public constant BALLOT_TYPEHASH = keccak256("Ballot(uint256 proposalId,uint8 support)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::36 => keccak256("ExtendedBallot(uint256 proposalId,uint8 support,string reason,bytes params)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::194 => * @dev Part of the Governor Bravo's interface: _"The number of votes required in order for a voter to become a proposer"_.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::253 => "Governor: proposer votes below proposal threshold"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::258 => require(targets.length == values.length, "Governor: invalid proposal length");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::259 => require(targets.length == calldatas.length, "Governor: invalid proposal length");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::263 => require(proposal.voteStart.isUnset(), "Governor: proposal already exists");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::300 => "Governor: proposal not successful"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::323 => string memory errorMessage = "Governor: call reverted without message";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::523 => require(state(proposalId) == ProposalState.Active, "Governor: vote not currently active");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/IGovernor.sol::6 => import "../utils/introspection/ERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::7 => import "../token/ERC721/IERC721Receiver.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::8 => import "../token/ERC1155/IERC1155Receiver.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::244 => require(targets.length == values.length, "TimelockController: length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::245 => require(targets.length == payloads.length, "TimelockController: length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::258 => require(!isOperation(id), "TimelockController: operation already scheduled");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::259 => require(delay >= getMinDelay(), "TimelockController: insufficient delay");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::271 => require(isOperationPending(id), "TimelockController: operation cannot be cancelled");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::320 => require(targets.length == values.length, "TimelockController: length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::321 => require(targets.length == payloads.length, "TimelockController: length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::345 => require(success, "TimelockController: underlying transaction reverted");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::352 => require(isOperationReady(id), "TimelockController: operation is not ready");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::353 => require(predecessor == bytes32(0) || isOperationDone(predecessor), "TimelockController: missing dependency");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::360 => require(isOperationReady(id), "TimelockController: operation is not ready");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::375 => require(msg.sender == address(this), "TimelockController: caller must be timelock");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::8 => import "../extensions/IGovernorTimelock.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::10 => import "./IGovernorCompatibilityBravo.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::111 => "GovernorBravo: proposer above threshold"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::274 => require(!receipt.hasVoted, "GovernorCompatibilityBravo: vote already cast");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::286 => revert("GovernorCompatibilityBravo: invalid vote type");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/IGovernorCompatibilityBravo.sol::51 => * @dev Part of the Governor Bravo's interface: _"The official record of all proposals ever proposed"_.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/IGovernorCompatibilityBravo.sol::71 => * @dev Part of the Governor Bravo's interface: _"Function used to propose a new proposal"_.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/IGovernorCompatibilityBravo.sol::82 => * @dev Part of the Governor Bravo's interface: _"Queues a proposal of state succeeded"_.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/IGovernorCompatibilityBravo.sol::87 => * @dev Part of the Governor Bravo's interface: _"Executes a queued proposal if eta has passed"_.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/IGovernorCompatibilityBravo.sol::111 => * @dev Part of the Governor Bravo's interface: _"Gets the receipt for a voter on a given proposal"_.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol::94 => require(!proposalvote.hasVoted[account], "GovernorVotingSimple: vote already cast");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol::104 => revert("GovernorVotingSimple: invalid value for enum VoteType");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol::100 => require(newVotingPeriod > 0, "GovernorSettings: voting period too low");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::9 => import "../../vendor/compound/ICompoundTimelock.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::99 => require(state(proposalId) == ProposalState.Succeeded, "Governor: proposal not successful");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::106 => "GovernorTimelockCompound: identical proposal action already queued"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::127 => require(eta > 0, "GovernorTimelockCompound: proposal not yet queued");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockControl.sol::98 => require(state(proposalId) == ProposalState.Succeeded, "Governor: proposal not successful");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesComp.sol::7 => import "../../token/ERC20/extensions/ERC20VotesComp.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesQuorumFraction.sol::77 => "GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/utils/Votes.sol::8 => import "../../utils/cryptography/draft-EIP712.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/utils/Votes.sol::36 => keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1155MetadataURI.sol::6 => import "../token/ERC1155/extensions/IERC1155MetadataURI.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1155Receiver.sol::6 => import "../token/ERC1155/IERC1155Receiver.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Receiver.sol::9 => * 0x88a7ca5c === bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Receiver.sol::23 => * @return `bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))`
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Spender.sol::9 => * 0x7b04a2d0 === bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Spender.sol::22 => * @return `bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))`
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol::6 => import "../utils/introspection/IERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1820Implementer.sol::6 => import "../utils/introspection/IERC1820Implementer.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1820Registry.sol::6 => import "../utils/introspection/IERC1820Registry.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol::6 => import "../token/ERC20/extensions/IERC20Metadata.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol::6 => import "../utils/introspection/IERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol::20 => * @return The keccak256 hash of "IERC3156FlashBorrower.onFlashLoan"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol::6 => import "../token/ERC20/extensions/IERC20Metadata.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721Enumerable.sol::6 => import "../token/ERC721/extensions/IERC721Enumerable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721Metadata.sol::6 => import "../token/ERC721/extensions/IERC721Metadata.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721Receiver.sol::6 => import "../token/ERC721/IERC721Receiver.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC777Recipient.sol::6 => import "../token/ERC777/IERC777Recipient.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC777Sender.sol::6 => import "../token/ERC777/IERC777Sender.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC2612.sol::6 => import "../token/ERC20/extensions/draft-IERC20Permit.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/metatx/MinimalForwarder.sol::7 => import "../utils/cryptography/draft-EIP712.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/metatx/MinimalForwarder.sol::30 => keccak256("ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/metatx/MinimalForwarder.sol::52 => require(verify(req, signature), "MinimalForwarder: signature does not match request");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlCrossChainMock.sol::5 => import "../access/AccessControlCrossChain.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlCrossChainMock.sol::6 => import "../crosschain/arbitrum/CrossChainEnabledArbitrumL2.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlEnumerableMock.sol::5 => import "../access/AccessControlEnumerable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ConditionalEscrowMock.sol::5 => import "../utils/escrow/ConditionalEscrow.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/Create2Impl.sol::6 => import "../utils/introspection/ERC1820Implementer.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/DoubleEndedQueueMock.sol::5 => import "../utils/structs/DoubleEndedQueue.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EIP712External.sol::5 => import "../utils/cryptography/draft-EIP712.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155BurnableMock.sol::5 => import "../token/ERC1155/extensions/ERC1155Burnable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155PausableMock.sol::6 => import "../token/ERC1155/extensions/ERC1155Pausable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155ReceiverMock.sol::5 => import "../token/ERC1155/IERC1155Receiver.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155ReceiverMock.sol::6 => import "../utils/introspection/ERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155ReceiverMock.sol::36 => require(!_recReverts, "ERC1155ReceiverMock: reverting on receive");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155ReceiverMock.sol::48 => require(!_batReverts, "ERC1155ReceiverMock: reverting on batch receive");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155SupplyMock.sol::6 => import "../token/ERC1155/extensions/ERC1155Supply.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155URIStorageMock.sol::6 => import "../token/ERC1155/extensions/ERC1155URIStorage.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165InterfacesSupported.sol::5 => import "../../utils/introspection/IERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165InterfacesSupported.sol::47 => require(interfaceId != 0xffffffff, "ERC165InterfacesSupported: invalid interface id");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165CheckerMock.sol::5 => import "../utils/introspection/ERC165Checker.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165Mock.sol::5 => import "../utils/introspection/ERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165StorageMock.sol::5 => import "../utils/introspection/ERC165Storage.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1820ImplementerMock.sol::5 => import "../utils/introspection/ERC1820Implementer.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20BurnableMock.sol::5 => import "../token/ERC20/extensions/ERC20Burnable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20CappedMock.sol::5 => import "../token/ERC20/extensions/ERC20Capped.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20FlashMintMock.sol::5 => import "../token/ERC20/extensions/ERC20FlashMint.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20PausableMock.sol::5 => import "../token/ERC20/extensions/ERC20Pausable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20PermitMock.sol::5 => import "../token/ERC20/extensions/draft-ERC20Permit.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20SnapshotMock.sol::5 => import "../token/ERC20/extensions/ERC20Snapshot.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20VotesCompMock.sol::5 => import "../token/ERC20/extensions/ERC20VotesComp.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20VotesMock.sol::5 => import "../token/ERC20/extensions/ERC20Votes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20WrapperMock.sol::5 => import "../token/ERC20/extensions/ERC20Wrapper.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC4626Mock.sol::5 => import "../token/ERC20/extensions/ERC4626.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721BurnableMock.sol::5 => import "../token/ERC721/extensions/ERC721Burnable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721EnumerableMock.sol::5 => import "../token/ERC721/extensions/ERC721Enumerable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721PausableMock.sol::5 => import "../token/ERC721/extensions/ERC721Pausable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721ReceiverMock.sol::5 => import "../token/ERC721/IERC721Receiver.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721RoyaltyMock.sol::5 => import "../token/ERC721/extensions/ERC721Royalty.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721URIStorageMock.sol::5 => import "../token/ERC721/extensions/ERC721URIStorage.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721VotesMock.sol::5 => import "../token/ERC721/extensions/draft-ERC721Votes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol::6 => import "../token/ERC777/IERC777Sender.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol::7 => import "../token/ERC777/IERC777Recipient.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol::9 => import "../utils/introspection/IERC1820Registry.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol::10 => import "../utils/introspection/ERC1820Implementer.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::5 => import "../utils/structs/EnumerableMap.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableSetMock.sol::5 => import "../utils/structs/EnumerableSet.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorCompMock.sol::5 => import "../governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorCompMock.sol::6 => import "../governance/extensions/GovernorVotesComp.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorCompatibilityBravoMock.sol::5 => import "../governance/compatibility/GovernorCompatibilityBravo.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorCompatibilityBravoMock.sol::6 => import "../governance/extensions/GovernorTimelockCompound.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorCompatibilityBravoMock.sol::7 => import "../governance/extensions/GovernorSettings.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorCompatibilityBravoMock.sol::8 => import "../governance/extensions/GovernorVotesComp.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorMock.sol::5 => import "../governance/extensions/GovernorProposalThreshold.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorMock.sol::6 => import "../governance/extensions/GovernorSettings.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorMock.sol::7 => import "../governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorMock.sol::8 => import "../governance/extensions/GovernorVotesQuorumFraction.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorPreventLateQuorumMock.sol::5 => import "../governance/extensions/GovernorPreventLateQuorum.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorPreventLateQuorumMock.sol::6 => import "../governance/extensions/GovernorSettings.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorPreventLateQuorumMock.sol::7 => import "../governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorPreventLateQuorumMock.sol::8 => import "../governance/extensions/GovernorVotes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockCompoundMock.sol::5 => import "../governance/extensions/GovernorTimelockCompound.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockCompoundMock.sol::6 => import "../governance/extensions/GovernorSettings.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockCompoundMock.sol::7 => import "../governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockCompoundMock.sol::8 => import "../governance/extensions/GovernorVotesQuorumFraction.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockControlMock.sol::5 => import "../governance/extensions/GovernorTimelockControl.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockControlMock.sol::6 => import "../governance/extensions/GovernorSettings.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockControlMock.sol::7 => import "../governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockControlMock.sol::8 => import "../governance/extensions/GovernorVotesQuorumFraction.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorVoteMock.sol::5 => import "../governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorVoteMock.sol::6 => import "../governance/extensions/GovernorVotes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorWithParamsMock.sol::5 => import "../governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorWithParamsMock.sol::6 => import "../governance/extensions/GovernorVotes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MerkleProofWrapper.sol::5 => import "../utils/cryptography/MerkleProof.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeERC20Helper.sol::7 => import "../token/ERC20/extensions/draft-ERC20Permit.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeERC20Helper.sol::8 => import "../token/ERC20/utils/SafeERC20.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeERC20Helper.sol::110 => ERC20("ERC20PermitNoRevertMock", "ERC20PermitNoRevertMock"),
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SignatureCheckerMock.sol::5 => import "../utils/cryptography/SignatureChecker.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/UUPS/UUPSLegacy.sol::16 => require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/UUPS/UUPSLegacy.sol::44 => require(oldImplementation == _getImplementation(), "ERC1967Upgrade: upgrade breaks further upgrades");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/UUPS/UUPSUpgradeableMock.sol::6 => import "../../proxy/utils/UUPSUpgradeable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::69 => require(delay_ >= MINIMUM_DELAY, "Timelock::constructor: Delay must exceed minimum delay.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::70 => require(delay_ <= MAXIMUM_DELAY, "Timelock::setDelay: Delay must not exceed maximum delay.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::79 => require(msg.sender == address(this), "Timelock::setDelay: Call must come from Timelock.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::80 => require(delay_ >= MINIMUM_DELAY, "Timelock::setDelay: Delay must exceed minimum delay.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::81 => require(delay_ <= MAXIMUM_DELAY, "Timelock::setDelay: Delay must not exceed maximum delay.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::88 => require(msg.sender == pendingAdmin, "Timelock::acceptAdmin: Call must come from pendingAdmin.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::96 => require(msg.sender == address(this), "Timelock::setPendingAdmin: Call must come from Timelock.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::109 => require(msg.sender == admin, "Timelock::queueTransaction: Call must come from admin.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::112 => "Timelock::queueTransaction: Estimated execution block must satisfy delay."
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::129 => require(msg.sender == admin, "Timelock::cancelTransaction: Call must come from admin.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::144 => require(msg.sender == admin, "Timelock::executeTransaction: Call must come from admin.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::147 => require(queuedTransactions[txHash], "Timelock::executeTransaction: Transaction hasn't been queued.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::148 => require(getBlockTimestamp() >= eta, "Timelock::executeTransaction: Transaction hasn't surpassed time lock.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::149 => require(getBlockTimestamp() <= eta + GRACE_PERIOD, "Timelock::executeTransaction: Transaction is stale.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::163 => require(success, "Timelock::executeTransaction: Transaction execution reverted.");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/crosschain/bridges.sol::6 => import "../../vendor/polygon/IFxMessageProcessor.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/crosschain/receivers.sol::6 => import "../../crosschain/amb/CrossChainEnabledAMB.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/crosschain/receivers.sol::7 => import "../../crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/crosschain/receivers.sol::8 => import "../../crosschain/arbitrum/CrossChainEnabledArbitrumL2.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/crosschain/receivers.sol::9 => import "../../crosschain/optimism/CrossChainEnabledOptimism.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/crosschain/receivers.sol::10 => import "../../crosschain/polygon/CrossChainEnabledPolygonChild.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor1.sol::5 => import "../../governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor1.sol::6 => import "../../governance/extensions/GovernorVotes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor1.sol::7 => import "../../governance/extensions/GovernorVotesQuorumFraction.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor1.sol::8 => import "../../governance/extensions/GovernorTimelockControl.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor2.sol::5 => import "../../governance/extensions/GovernorProposalThreshold.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor2.sol::6 => import "../../governance/extensions/GovernorCountingSimple.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor2.sol::7 => import "../../governance/extensions/GovernorVotes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor2.sol::8 => import "../../governance/extensions/GovernorVotesQuorumFraction.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor2.sol::9 => import "../../governance/extensions/GovernorTimelockControl.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor3.sol::5 => import "../../governance/compatibility/GovernorCompatibilityBravo.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor3.sol::6 => import "../../governance/extensions/GovernorVotes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor3.sol::7 => import "../../governance/extensions/GovernorVotesQuorumFraction.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor3.sol::8 => import "../../governance/extensions/GovernorTimelockControl.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::7 => import "../../interfaces/draft-IERC1822.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::46 => require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::93 => require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::95 => revert("ERC1967Upgrade: new implementation is not UUPS");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::124 => require(newAdmin != address(0), "ERC1967: new admin is the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::160 => require(Address.isContract(newBeacon), "ERC1967: new beacon is not a contract");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::163 => "ERC1967: beacon implementation is not a contract"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol::62 => require(Address.isContract(newImplementation), "UpgradeableBeacon: implementation is not a contract");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol::6 => import "./TransparentUpgradeableProxy.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol::20 => * "admin cannot fallback to proxy target".
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol::121 => require(msg.sender != _getAdmin(), "TransparentUpgradeableProxy: admin cannot fallback to proxy target");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol::82 => "Initializable: contract is already initialized"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol::108 => require(!_initializing && _initialized < version, "Initializable: contract is already initialized");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol::121 => require(_initializing, "Initializable: contract is not initializing");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol::132 => require(!_initializing, "Initializable: contract is initializing");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol::6 => import "../../interfaces/draft-IERC1822.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol::33 => require(address(this) != __self, "Function must be called through delegatecall");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol::34 => require(_getImplementation() == __self, "Function must be called through active proxy");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol::43 => require(address(this) == __self, "UUPSUpgradeable: must not be called through delegatecall");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::8 => import "./extensions/IERC1155MetadataURI.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::11 => import "../../utils/introspection/ERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::71 => require(account != address(0), "ERC1155: address zero is not a valid owner");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::89 => require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::126 => "ERC1155: caller is not token owner nor approved"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::143 => "ERC1155: caller is not token owner nor approved"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::167 => require(to != address(0), "ERC1155: transfer to the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::176 => require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::206 => require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::207 => require(to != address(0), "ERC1155: transfer to the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::218 => require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::272 => require(to != address(0), "ERC1155: mint to the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::305 => require(to != address(0), "ERC1155: mint to the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::306 => require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::338 => require(from != address(0), "ERC1155: burn from the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::347 => require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::371 => require(from != address(0), "ERC1155: burn from the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::372 => require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::383 => require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::404 => require(owner != operator, "ERC1155: setting approval status for self");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::478 => revert("ERC1155: ERC1155Receiver rejected tokens");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::483 => revert("ERC1155: transfer to non ERC1155Receiver implementer");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::501 => revert("ERC1155: ERC1155Receiver rejected tokens");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::506 => revert("ERC1155: transfer to non ERC1155Receiver implementer");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol::6 => import "../../utils/introspection/IERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::6 => import "../../utils/introspection/IERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::17 => * `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::25 => * @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::41 => * `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::49 => * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Burnable.sol::22 => "ERC1155: caller is not token owner nor approved"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Burnable.sol::35 => "ERC1155: caller is not token owner nor approved"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Pausable.sol::36 => require(!paused(), "ERC1155Pausable: token transfer while paused");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol::57 => require(supply >= amount, "ERC1155: burn amount exceeds totalSupply");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::7 => import "../extensions/ERC1155Burnable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::8 => import "../extensions/ERC1155Pausable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::9 => import "../../../access/AccessControlEnumerable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::58 => require(hasRole(MINTER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have minter role to mint");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::72 => require(hasRole(MINTER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have minter role to mint");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::87 => require(hasRole(PAUSER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have pauser role to pause");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::101 => require(hasRole(PAUSER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have pauser role to unpause");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol::7 => import "../../../utils/introspection/ERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::204 => require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::231 => require(from != address(0), "ERC20: transfer from the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::232 => require(to != address(0), "ERC20: transfer to the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::237 => require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::281 => require(account != address(0), "ERC20: burn from the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::286 => require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::315 => require(owner != address(0), "ERC20: approve from the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::316 => require(spender != address(0), "ERC20: approve to the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20FlashMint.sol::6 => import "../../../interfaces/IERC3156FlashBorrower.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20FlashMint.sol::7 => import "../../../interfaces/IERC3156FlashLender.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20FlashMint.sol::79 => require(amount <= maxFlashLoan(token), "ERC20FlashMint: amount exceeds maxFlashLoan");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20FlashMint.sol::84 => "ERC20FlashMint: invalid return value"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Pausable.sol::31 => require(!paused(), "ERC20Pausable: token transfer while paused");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::8 => import "../../../governance/utils/IVotes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::10 => import "../../../utils/cryptography/ECDSA.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::34 => keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::164 => require(totalSupply() <= _maxSupply(), "ERC20Votes: total supply risks overflowing votes");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Wrapper.sol::12 => * Users can deposit and withdraw "underlying tokens" and receive a matching number of "wrapped tokens". This is useful
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol::8 => import "../../../utils/cryptography/draft-EIP712.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol::9 => import "../../../utils/cryptography/ECDSA.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol::29 => keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol::9 => import "../../../access/AccessControlEnumerable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol::55 => require(hasRole(MINTER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have minter role to mint");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol::69 => require(hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to pause");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol::83 => require(hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to unpause");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol::7 => import "../extensions/draft-IERC20Permit.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol::56 => "SafeERC20: approve from non-zero to non-zero allowance"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol::77 => require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol::96 => require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol::113 => require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/TokenTimelock.sol::37 => require(releaseTime_ > block.timestamp, "TokenTimelock: release time is before current time");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/TokenTimelock.sol::69 => require(block.timestamp >= releaseTime(), "TokenTimelock: current time is before release time");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/TokenTimelock.sol::72 => require(amount > 0, "TokenTimelock: no tokens to release");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::12 => import "../../utils/introspection/ERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::63 => require(owner != address(0), "ERC721: address zero is not a valid owner");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::114 => require(to != owner, "ERC721: approval to current owner");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::118 => "ERC721: approve caller is not token owner nor approved for all"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::156 => require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::181 => require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::210 => require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::263 => "ERC721: transfer to non ERC721Receiver implementer"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::335 => require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::336 => require(to != address(0), "ERC721: transfer to the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::405 => revert("ERC721: transfer to non ERC721Receiver implementer");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol::6 => import "../../utils/introspection/IERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Burnable.sol::23 => require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol::38 => require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol::53 => require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Pausable.sol::31 => require(!paused(), "ERC721Pausable: token transfer while paused");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Royalty.sol::8 => import "../../../utils/introspection/ERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol::46 => require(_exists(tokenId), "ERC721URIStorage: URI set of nonexistent token");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/draft-ERC721Votes.sol::7 => import "../../../governance/utils/Votes.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::7 => import "../extensions/ERC721Enumerable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::10 => import "../../../access/AccessControlEnumerable.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::83 => require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::101 => require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to pause");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::115 => require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to unpause");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::12 => import "../../utils/introspection/IERC1820Registry.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::174 => require(_msgSender() != operator, "ERC777: authorizing self as operator");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::189 => require(operator != _msgSender(), "ERC777: revoking self as operator");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::219 => require(isOperatorFor(_msgSender(), sender), "ERC777: caller is not an operator for holder");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::234 => require(isOperatorFor(_msgSender(), account), "ERC777: caller is not an operator for holder");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::371 => require(from != address(0), "ERC777: transfer from the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::372 => require(to != address(0), "ERC777: transfer to the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::396 => require(from != address(0), "ERC777: burn from the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::406 => require(fromBalance >= amount, "ERC777: burn amount exceeds balance");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::427 => require(fromBalance >= amount, "ERC777: transfer amount exceeds balance");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::447 => require(holder != address(0), "ERC777: approve from the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::448 => require(spender != address(0), "ERC777: approve to the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::501 => require(!to.isContract(), "ERC777: token recipient contract has no implementer for ERC777TokensRecipient");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol::7 => import "../../utils/introspection/ERC165.sol";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol::73 => require(feeNumerator <= _feeDenominator(), "ERC2981: royalty fee will exceed salePrice");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol::99 => require(feeNumerator <= _feeDenominator(), "ERC2981: royalty fee will exceed salePrice");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::64 => require(success, "Address: unable to send value, recipient may have reverted");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::119 => return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::134 => require(address(this).balance >= value, "Address: insufficient balance for call");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::148 => return functionStaticCall(target, data, "Address: low-level static call failed");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::162 => require(isContract(target), "Address: static call to non-contract");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::175 => return functionDelegateCall(target, data, "Address: low-level delegate call failed");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::189 => require(isContract(target), "Address: delegate call to non-contract");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Base64.sol::15 => string internal constant _TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol::24 => *         require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::31 => revert("ECDSA: invalid signature 's' value");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::33 => revert("ECDSA: invalid signature 'v' value");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol::57 => "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/ConditionalEscrow.sol::22 => require(withdrawalAllowed(payee), "ConditionalEscrow: payee is not allowed to withdraw");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/RefundEscrow.sol::38 => require(beneficiary_ != address(0), "RefundEscrow: beneficiary is the zero address");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/RefundEscrow.sol::62 => require(state() == State.Active, "RefundEscrow: can only deposit while active");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/RefundEscrow.sol::71 => require(state() == State.Active, "RefundEscrow: can only close while active");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/RefundEscrow.sol::80 => require(state() == State.Active, "RefundEscrow: can only enable refunds while active");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/RefundEscrow.sol::89 => require(state() == State.Closed, "RefundEscrow: beneficiary can only withdraw while closed");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::35 => require(value <= type(uint248).max, "SafeCast: value doesn't fit in 248 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::52 => require(value <= type(uint240).max, "SafeCast: value doesn't fit in 240 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::69 => require(value <= type(uint232).max, "SafeCast: value doesn't fit in 232 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::86 => require(value <= type(uint224).max, "SafeCast: value doesn't fit in 224 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::103 => require(value <= type(uint216).max, "SafeCast: value doesn't fit in 216 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::120 => require(value <= type(uint208).max, "SafeCast: value doesn't fit in 208 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::137 => require(value <= type(uint200).max, "SafeCast: value doesn't fit in 200 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::154 => require(value <= type(uint192).max, "SafeCast: value doesn't fit in 192 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::171 => require(value <= type(uint184).max, "SafeCast: value doesn't fit in 184 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::188 => require(value <= type(uint176).max, "SafeCast: value doesn't fit in 176 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::205 => require(value <= type(uint168).max, "SafeCast: value doesn't fit in 168 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::222 => require(value <= type(uint160).max, "SafeCast: value doesn't fit in 160 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::239 => require(value <= type(uint152).max, "SafeCast: value doesn't fit in 152 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::256 => require(value <= type(uint144).max, "SafeCast: value doesn't fit in 144 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::273 => require(value <= type(uint136).max, "SafeCast: value doesn't fit in 136 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::290 => require(value <= type(uint128).max, "SafeCast: value doesn't fit in 128 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::307 => require(value <= type(uint120).max, "SafeCast: value doesn't fit in 120 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::324 => require(value <= type(uint112).max, "SafeCast: value doesn't fit in 112 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::341 => require(value <= type(uint104).max, "SafeCast: value doesn't fit in 104 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::358 => require(value <= type(uint96).max, "SafeCast: value doesn't fit in 96 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::375 => require(value <= type(uint88).max, "SafeCast: value doesn't fit in 88 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::392 => require(value <= type(uint80).max, "SafeCast: value doesn't fit in 80 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::409 => require(value <= type(uint72).max, "SafeCast: value doesn't fit in 72 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::426 => require(value <= type(uint64).max, "SafeCast: value doesn't fit in 64 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::443 => require(value <= type(uint56).max, "SafeCast: value doesn't fit in 56 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::460 => require(value <= type(uint48).max, "SafeCast: value doesn't fit in 48 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::477 => require(value <= type(uint40).max, "SafeCast: value doesn't fit in 40 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::494 => require(value <= type(uint32).max, "SafeCast: value doesn't fit in 32 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::511 => require(value <= type(uint24).max, "SafeCast: value doesn't fit in 24 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::528 => require(value <= type(uint16).max, "SafeCast: value doesn't fit in 16 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::545 => require(value <= type(uint8).max, "SafeCast: value doesn't fit in 8 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::577 => require(value >= type(int248).min && value <= type(int248).max, "SafeCast: value doesn't fit in 248 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::595 => require(value >= type(int240).min && value <= type(int240).max, "SafeCast: value doesn't fit in 240 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::613 => require(value >= type(int232).min && value <= type(int232).max, "SafeCast: value doesn't fit in 232 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::631 => require(value >= type(int224).min && value <= type(int224).max, "SafeCast: value doesn't fit in 224 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::649 => require(value >= type(int216).min && value <= type(int216).max, "SafeCast: value doesn't fit in 216 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::667 => require(value >= type(int208).min && value <= type(int208).max, "SafeCast: value doesn't fit in 208 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::685 => require(value >= type(int200).min && value <= type(int200).max, "SafeCast: value doesn't fit in 200 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::703 => require(value >= type(int192).min && value <= type(int192).max, "SafeCast: value doesn't fit in 192 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::721 => require(value >= type(int184).min && value <= type(int184).max, "SafeCast: value doesn't fit in 184 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::739 => require(value >= type(int176).min && value <= type(int176).max, "SafeCast: value doesn't fit in 176 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::757 => require(value >= type(int168).min && value <= type(int168).max, "SafeCast: value doesn't fit in 168 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::775 => require(value >= type(int160).min && value <= type(int160).max, "SafeCast: value doesn't fit in 160 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::793 => require(value >= type(int152).min && value <= type(int152).max, "SafeCast: value doesn't fit in 152 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::811 => require(value >= type(int144).min && value <= type(int144).max, "SafeCast: value doesn't fit in 144 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::829 => require(value >= type(int136).min && value <= type(int136).max, "SafeCast: value doesn't fit in 136 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::847 => require(value >= type(int128).min && value <= type(int128).max, "SafeCast: value doesn't fit in 128 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::865 => require(value >= type(int120).min && value <= type(int120).max, "SafeCast: value doesn't fit in 120 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::883 => require(value >= type(int112).min && value <= type(int112).max, "SafeCast: value doesn't fit in 112 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::901 => require(value >= type(int104).min && value <= type(int104).max, "SafeCast: value doesn't fit in 104 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::919 => require(value >= type(int96).min && value <= type(int96).max, "SafeCast: value doesn't fit in 96 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::937 => require(value >= type(int88).min && value <= type(int88).max, "SafeCast: value doesn't fit in 88 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::955 => require(value >= type(int80).min && value <= type(int80).max, "SafeCast: value doesn't fit in 80 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::973 => require(value >= type(int72).min && value <= type(int72).max, "SafeCast: value doesn't fit in 72 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::991 => require(value >= type(int64).min && value <= type(int64).max, "SafeCast: value doesn't fit in 64 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::1009 => require(value >= type(int56).min && value <= type(int56).max, "SafeCast: value doesn't fit in 56 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::1027 => require(value >= type(int48).min && value <= type(int48).max, "SafeCast: value doesn't fit in 48 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::1045 => require(value >= type(int40).min && value <= type(int40).max, "SafeCast: value doesn't fit in 40 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::1063 => require(value >= type(int32).min && value <= type(int32).max, "SafeCast: value doesn't fit in 32 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::1081 => require(value >= type(int24).min && value <= type(int24).max, "SafeCast: value doesn't fit in 24 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::1099 => require(value >= type(int16).min && value <= type(int16).max, "SafeCast: value doesn't fit in 16 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::1117 => require(value >= type(int8).min && value <= type(int8).max, "SafeCast: value doesn't fit in 8 bits");
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::1132 => require(value <= uint256(type(int256).max), "SafeCast: value doesn't fit in an int256");
  2022-10-traderjoe/src/LBFactory.sol::6 => import "openzeppelin/utils/structs/EnumerableSet.sol";
  2022-10-traderjoe/src/LBPair.sol::12 => import "./libraries/FeeDistributionHelper.sol";
  2022-10-traderjoe/src/LBPair.sol::15 => import "./libraries/ReentrancyGuardUpgradeable.sol";
  2022-10-traderjoe/src/LBPair.sol::21 => import "./interfaces/ILBFlashLoanCallback.sol";
  2022-10-traderjoe/src/LBRouter.sol::5 => import "openzeppelin/token/ERC20/IERC20.sol";
  2022-10-traderjoe/src/LBToken.sol::5 => import "openzeppelin/utils/structs/EnumerableSet.sol";
  2022-10-traderjoe/src/interfaces/ILBFactory.sol::5 => import "openzeppelin/token/ERC20/IERC20.sol";
  2022-10-traderjoe/src/interfaces/ILBPair.sol::5 => import "openzeppelin/token/ERC20/IERC20.sol";
  2022-10-traderjoe/src/interfaces/IWAVAX.sol::5 => import "openzeppelin/token/ERC20/IERC20.sol";
  2022-10-traderjoe/src/libraries/FeeDistributionHelper.sol::5 => import "openzeppelin/token/ERC20/IERC20.sol";
  2022-10-traderjoe/src/libraries/Math128x128.sol::70 => // The "delta >>= 1" part is equivalent to "delta /= 2", but shifting bits is faster.
  2022-10-traderjoe/src/libraries/PendingOwnable.sol::6 => import "../interfaces/IPendingOwnable.sol";
  2022-10-traderjoe/src/libraries/TokenHelper.sol::5 => import "openzeppelin/token/ERC20/IERC20.sol";
  2022-10-traderjoe/test/Faucet.t.sol::6 => import "test/mocks/ERC20MockDecimalsOwnable.sol";
  2022-10-traderjoe/test/Faucet.t.sol::29 => token12 = new ERC20MockDecimalsOwnable("Mock Token 12 decimals", "TOKEN12", 12);
  2022-10-traderjoe/test/LBPair.Fees.t.sol::128 => assertGt(feesForBobY, 0, "BOB should also have fees on token Y");
  2022-10-traderjoe/test/LBPair.Fees.t.sol::134 => assertApproxEqAbs(feesForDevY + feesForBobY, accumulatedYFees, 1, "Sum of users fees = accumulated fees");
  2022-10-traderjoe/test/LBPair.Fees.t.sol::141 => "DEV gets the expected amount when withdrawing fees"
  2022-10-traderjoe/test/LBPair.Fees.t.sol::149 => "BOB gets the expected amount when withdrawing fees"
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::52 => assertEq(feeParameters.volatilityAccumulated, 0, "volatilityAccumulated should be 0");
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::59 => "Max volatilityAccumulated should be correctly set"
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::61 => assertEq(feeParameters.filterPeriod, _filterPeriod, "Filter Period should be correctly set");
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::62 => assertEq(feeParameters.decayPeriod, _decayPeriod, "Decay Period should be correctly set");
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::64 => assertEq(feeParameters.baseFactor, _baseFactor, "Base Factor should be correctly set");
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::65 => assertEq(feeParameters.protocolShare, _protocolShare, "Protocol Share should be correctly set");
  2022-10-traderjoe/test/LBQuoter.t.sol::64 => assertApproxEqAbs(quote.amounts[1], 20e6, 2e6, "Price of 1 AVAX should be approx 20 USDC");
  2022-10-traderjoe/test/LBQuoter.t.sol::81 => assertApproxEqAbs(quote.amounts[0], 1e18, 0.1e18, "Price of 1 AVAX should be approx 20 USDT");
  2022-10-traderjoe/test/LBQuoter.t.sol::99 => assertApproxEqAbs(quote.amounts[1], 20e6, 2e6, "Price of 1 AVAX should be approx 20 USDC");
  2022-10-traderjoe/test/LBQuoter.t.sol::119 => assertApproxEqAbs(quote.amounts[0], 1e18, 0.1e18, "Price of 1 AVAX should be approx 20 USDT");
  2022-10-traderjoe/test/LBQuoter.t.sol::145 => assertApproxEqAbs(quote.amounts[2], 20e6, 2e6, "Price of 1 AVAX should be approx 20 USDT");
  2022-10-traderjoe/test/LBQuoter.t.sol::164 => assertApproxEqAbs(quote.amounts[0], 1e18, 0.1e18, "Price of 1 AVAX should be approx 20 USDT");
  2022-10-traderjoe/test/LBQuoter.t.sol::185 => assertApproxEqAbs(quote.amounts[0], 1e18, 0.1e18, "Price of 1 AVAX should be approx 20 USDC");
  2022-10-traderjoe/test/LBQuoter.t.sol::186 => assertEq(quote.binSteps[0], DEFAULT_BIN_STEP, "LBPair should be picked as it has the best price");
  2022-10-traderjoe/test/LBQuoter.t.sol::204 => assertApproxEqAbs(quote.amounts[1], 20e6, 2e6, "Price of 1 AVAX should be approx 20 USDT");
  2022-10-traderjoe/test/LBQuoter.t.sol::205 => assertEq(quote.binSteps[0], 0, "V1 pair should be picked as it has the best price");
  2022-10-traderjoe/test/LBRouter.Liquidity.t.sol::338 => vm.expectRevert(bytes("ERC20: burn amount exceeds balance"));
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::602 => console.log("fork mainnet for V1 testing support");
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::645 => console.log("fork mainnet for V1 testing support");
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::690 => console.log("fork mainnet for V1 testing support");
  2022-10-traderjoe/test/TestHelper.sol::21 => import "test/mocks/ERC20WithTransferTax.sol";
  2022-10-traderjoe/test/mocks/ERC20.sol::5 => import "openzeppelin/token/ERC20/ERC20.sol";
  2022-10-traderjoe/test/mocks/ERC20MockDecimals.sol::5 => import "openzeppelin/token/ERC20/ERC20.sol";
  2022-10-traderjoe/test/mocks/ERC20MockDecimalsOwnable.sol::5 => import "openzeppelin/token/ERC20/ERC20.sol";
  2022-10-traderjoe/test/mocks/ERC20WithTransferTax.sol::5 => import "openzeppelin/token/ERC20/ERC20.sol";
  2022-10-traderjoe/test/mocks/Faucet.sol::5 => import "../../src/libraries/PendingOwnable.sol";
  2022-10-traderjoe/test/mocks/Faucet.sol::6 => import "../../src/libraries/TokenHelper.sol";
  2022-10-traderjoe/test/mocks/FlashloanBorrower.sol::5 => import "openzeppelin/interfaces/IERC20.sol";
  2022-10-traderjoe/test/mocks/WAVAX.sol::5 => import "openzeppelin/token/ERC20/ERC20.sol";

 G008:
  2022-10-traderjoe/lib/forge-std/src/Script.sol::24 => if (nonce <= 2**8 - 1)  return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd7), bytes1(0x94), deployer, bytes1(0x81), uint8(nonce))));
  2022-10-traderjoe/lib/forge-std/src/Script.sol::26 => if (nonce <= 2**24 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd9), bytes1(0x94), deployer, bytes1(0x83), uint24(nonce))));
  2022-10-traderjoe/lib/forge-std/src/Test.sol::1065 => out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);
  2022-10-traderjoe/lib/forge-std/src/Vm.sol::201 => // Derive a private key from a provided mnenomic string (or mnenomic file path) at the derivation path m/44'/60'/0'/0/{index}
  2022-10-traderjoe/lib/forge-std/src/console2.sol::8 => // Reference: https://github.com/NomicFoundation/hardhat/issues/2178
  2022-10-traderjoe/lib/forge-std/src/test/StdError.t.sol::115 => uint256 l = 2**256 / 32;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol::34 => * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol::21 => * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol::77 => * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol::115 => * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::12 => * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol::18 => * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::18 => * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::77 => * be displayed to a user as `5.05` (`505 / 10 ** 2`).
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol::62 => * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::53 => * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Base64.sol::58 => // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Counters.sol::18 => // this feature: see https://github.com/ethereum/solidity/issues/4637
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::161 => // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::35 => // (a + b) / 2 can overflow.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::36 => return (a & b) + (a ^ b) / 2;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::52 => * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::63 => // variables such that product = prod1 * 2^256 + prod0.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::167 => // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::168 => // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a
  2022-10-traderjoe/src/LBFactory.sol::30 => uint256 public constant override MAX_PROTOCOL_SHARE = 2_500; // 25%
  2022-10-traderjoe/src/LBFactory.sol::560 => // Can't overflow as the max value is `max(uint24) * (max(uint24) * max(uint16)) ** 2 < max(uint104)`
  2022-10-traderjoe/src/LBFactory.sol::562 => // decimals(variableFeeControl * (volatilityAccumulated * binStep)**2 / 100) = 4 + (4 + 4) * 2 - 2 = 18
  2022-10-traderjoe/src/libraries/BinHelper.sol::26 => // can't overflow as `2**23 + log2(price) < 2**23 + 2**128 < max(uint256)`
  2022-10-traderjoe/src/libraries/FeeHelper.sol::102 => // Can't overflow as the max value is `max(uint24) * (max(uint24) * max(uint16)) ** 2 < max(uint104)`
  2022-10-traderjoe/src/libraries/FeeHelper.sol::104 => // decimals(variableFeeControl * (volatilityAccumulated * binStep)**2 / 100) = 4 + (4 + 4) * 2 - 2 = 18
  2022-10-traderjoe/src/libraries/Math128x128.sol::37 => // If we use an offset of 128 bits, y would need 129 bits and y**2 would would overflow and we would have to
  2022-10-traderjoe/src/libraries/Math128x128.sol::57 => // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).
  2022-10-traderjoe/src/libraries/Math128x128.sol::64 => // This is y = x * 2^(-n).
  2022-10-traderjoe/src/libraries/Math128x128.sol::79 => // Corresponds to z/2 on Wikipedia.
  2022-10-traderjoe/src/libraries/Math512Bits.sol::17 => /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv
  2022-10-traderjoe/src/libraries/Math512Bits.sol::43 => /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv
  2022-10-traderjoe/src/libraries/Math512Bits.sol::79 => /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv
  2022-10-traderjoe/src/libraries/Math512Bits.sol::106 => /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv
  2022-10-traderjoe/src/libraries/Math512Bits.sol::139 => /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv
  2022-10-traderjoe/src/libraries/Math512Bits.sol::171 => // variables such that product = prod1 * 2^256 + prod0.
  2022-10-traderjoe/src/libraries/Oracle.sol::162 => _middle = (_low + _high) / 2;
  2022-10-traderjoe/src/libraries/TreeMath.sol::105 => // Optimization of `(_id / 256, _id % 256)`
  2022-10-traderjoe/src/libraries/TreeMath.sol::114 => // Optimization of `_branchId * 256 + _leafId`
  2022-10-traderjoe/test/LBFactory.t.sol::68 => DEFAULT_BASE_FACTOR / 4,
  2022-10-traderjoe/test/LBFactory.t.sol::72 => DEFAULT_VARIABLE_FEE_CONTROL / 4,
  2022-10-traderjoe/test/LBPair.Fees.t.sol::200 => (uint256 amountYInForSwap, ) = router.getSwapIn(pair, amountYInLiquidity / 4, true);
  2022-10-traderjoe/test/LBPair.Fees.t.sol::207 => (amountYInForSwap, ) = router.getSwapIn(pair, amountYInLiquidity / 4, true);
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::70 => vm.assume(_price < 2**239);
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::105 => assertApproxEqRel(currentBinReserveX, amountXIn / 2, 1e3, "currentBinReserveX");
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::106 => assertApproxEqRel(currentBinReserveY, amountYIn / 2, 1e3, "currentBinReserveY");
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::109 => assertApproxEqRel(binYReserve1, amountYIn / 2, 1e3, "binYReserve1");
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::112 => assertApproxEqRel(binXReserve0, amountXIn / 2, 1e3, "binXReserve1");
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::124 => ) = spreadLiquidity(amount1In * 2, ID_ONE, 5, 0);
  2022-10-traderjoe/test/LBPair.Oracle.t.sol::140 => ) = spreadLiquidity(amount1In * 2, ID_ONE, 99, 100);
  2022-10-traderjoe/test/LBPair.Oracle.t.sol::181 => ) = spreadLiquidity(amount1In * 2, ID_ONE, 99, 100);
  2022-10-traderjoe/test/LBPair.Oracle.t.sol::225 => (uint256 amountYInForSwap, ) = router.getSwapIn(pair, amountYInLiquidity / 4, true);
  2022-10-traderjoe/test/LBPair.t.sol::78 => _distributionX[0] = Constants.PRECISION / 2;
  2022-10-traderjoe/test/LBPair.t.sol::79 => _distributionX[1] = Constants.PRECISION / 2 + 1;
  2022-10-traderjoe/test/LBPair.t.sol::85 => _distributionY[0] = Constants.PRECISION / 2;
  2022-10-traderjoe/test/LBPair.t.sol::86 => _distributionY[1] = Constants.PRECISION / 2 + 1;
  2022-10-traderjoe/test/LBRouter.Liquidity.t.sol::362 => assertEq(taxToken.balanceOf(DEV), amountTokenIn / 4 + 1); //2 transfers with 50% tax
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::212 => amountOut = amountOut / 2;
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::241 => amountOut = amountOut / 2;
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::280 => amountOut = amountOut / 2;
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::314 => amountOut = amountOut / 2;
  2022-10-traderjoe/test/LBToken.t.sol::231 => for (uint256 i; i < binAmount / 2; i++) {
  2022-10-traderjoe/test/LBToken.t.sol::232 => _ids[i] = _startId - (binAmount / 2) * (1 + _gap) + i * (1 + _gap);
  2022-10-traderjoe/test/LBTokenInternal.t.sol::24 => _mint(address(0), 2**23, 1000);
  2022-10-traderjoe/test/LBTokenInternal.t.sol::29 => uint256 binNumber = 2**23;
  2022-10-traderjoe/test/LBTokenInternal.t.sol::43 => _burn(address(0), 2**23, 1000);
  2022-10-traderjoe/test/LBTokenInternal.t.sol::49 => uint256 binNumber = 2**23;
  2022-10-traderjoe/test/LBTokenInternal.t.sol::59 => uint256 binNumber = 2**23;
  2022-10-traderjoe/test/TestHelper.sol::26 => uint24 internal constant ID_ONE = 2**23;
  2022-10-traderjoe/test/TestHelper.sol::151 => uint24 spread = _numberBins / 2;
  2022-10-traderjoe/test/TestHelper.sol::253 => uint256 spread = _numberBins / 2;
  2022-10-traderjoe/test/mocks/ERC20WithTransferTax.sol::28 => uint256 tax = amount / 2;
  2022-10-traderjoe/test/mocks/ERC20WithTransferTax.sol::35 => uint256 tax = amount / 2;

 L001:
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC3156FlashBorrowerMock.sol::48 => IERC20(token).approve(token, amount + fee);
  2022-10-traderjoe/test/LBQuoter.t.sol::35 => testWavax.approve(address(routerV1), type(uint256).max);
  2022-10-traderjoe/test/LBQuoter.t.sol::37 => usdc.approve(address(routerV1), type(uint256).max);
  2022-10-traderjoe/test/LBQuoter.t.sol::39 => usdt.approve(address(routerV1), type(uint256).max);
  2022-10-traderjoe/test/LBRouter.FeesOnLiquidityAdd.t.sol::52 => token18D.approve(address(router), _amountYIn);
  2022-10-traderjoe/test/LBRouter.FeesOnLiquidityAdd.t.sol::82 => token6D.approve(address(router), amountXIn);
  2022-10-traderjoe/test/LBRouter.FeesOnLiquidityAdd.t.sol::154 => token6D.approve(address(router), _amountXIn);
  2022-10-traderjoe/test/LBRouter.FeesOnLiquidityAdd.t.sol::184 => token18D.approve(address(router), amountYIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::68 => token6D.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::91 => token6D.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::137 => token6D.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::159 => token6D.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::203 => taxToken.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::236 => wavax.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::271 => taxToken.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::340 => token6D.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::354 => token6D.approve(address(router), 100e18);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::384 => token6D.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::398 => token18D.approve(address(router), token18D.balanceOf(DEV));
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::441 => token6D.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::442 => taxToken.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::455 => token6D.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::456 => taxToken.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::610 => token6D.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::637 => usdc.approve(address(router), usdc.balanceOf(DEV));
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::653 => token6D.approve(address(router), 100e18);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::680 => usdc.approve(address(router), usdc.balanceOf(DEV));
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::701 => wavax.transfer(taxPairv11, amountIn);
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::711 => token6D.approve(address(router), amountIn);
  2022-10-traderjoe/test/LBRouter.t.sol::250 => token6D.approve(address(router), amountXIn);
  2022-10-traderjoe/test/LBRouter.t.sol::252 => token18D.approve(address(router), _amountYIn);
  2022-10-traderjoe/test/TestHelper.sol::218 => _tokenX.approve(address(router), amountXIn);
  2022-10-traderjoe/test/TestHelper.sol::223 => _tokenY.approve(address(router), _amountYIn);
  2022-10-traderjoe/test/TestHelper.sol::226 => _tokenX.approve(address(router), amountXIn);
  2022-10-traderjoe/test/TestHelper.sol::228 => _tokenY.approve(address(router), _amountYIn);
  2022-10-traderjoe/test/TestHelper.sol::297 => _tokenX.approve(address(router), amountXIn);
  2022-10-traderjoe/test/TestHelper.sol::302 => _tokenY.approve(address(router), _amountYIn);
  2022-10-traderjoe/test/mocks/FlashloanBorrower.sol::48 => IERC20(lender.tokenX()).transfer(address(lender), amountXBorrowed + feeX);
  2022-10-traderjoe/test/mocks/FlashloanBorrower.sol::49 => IERC20(lender.tokenY()).transfer(address(lender), amountYBorrowed + feeY);

 L003:
  2022-10-traderjoe/lib/forge-std/lib/ds-test/demo/demo.sol::2 => pragma solidity >=0.5.0;
  2022-10-traderjoe/lib/forge-std/lib/ds-test/src/test.sol::16 => pragma solidity >=0.5.0;
  2022-10-traderjoe/lib/forge-std/src/Script.sol::2 => pragma solidity >=0.6.0 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/StdJson.sol::2 => pragma solidity >=0.6.0 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/Test.sol::2 => pragma solidity >=0.6.0 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/Vm.sol::2 => pragma solidity >=0.6.0 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/console.sol::2 => pragma solidity >=0.4.22 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/console2.sol::2 => pragma solidity >=0.4.22 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/test/Script.t.sol::2 => pragma solidity >=0.7.0 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/test/StdAssertions.t.sol::2 => pragma solidity >=0.7.0 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/test/StdCheats.t.sol::2 => pragma solidity >=0.7.0 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/test/StdError.t.sol::2 => pragma solidity >=0.8.10 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/test/StdMath.t.sol::2 => pragma solidity >=0.8.0 <0.9.0;
  2022-10-traderjoe/lib/forge-std/src/test/StdStorage.t.sol::2 => pragma solidity >=0.7.0 <0.9.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardControlFirstPriority.sol::2 => pragma solidity ^0.8.2;
  2022-10-traderjoe/lib/openzeppelin-contracts/certora/harnesses/WizardFirstTry.sol::2 => pragma solidity ^0.8.2;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControl.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControlCrossChain.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/Ownable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/CrossChainEnabled.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/amb/CrossChainEnabledAMB.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/amb/LibAMB.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL2.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/LibArbitrumL1.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/arbitrum/LibArbitrumL2.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/errors.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/optimism/CrossChainEnabledOptimism.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/optimism/LibOptimism.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/crosschain/polygon/CrossChainEnabledPolygonChild.sol::4 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/PaymentSplitter.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/finance/VestingWallet.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/Governor.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/IGovernor.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/GovernorCompatibilityBravo.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/compatibility/IGovernorCompatibilityBravo.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorPreventLateQuorum.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorProposalThreshold.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockCompound.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockControl.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesComp.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesQuorumFraction.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/extensions/IGovernorTimelock.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/utils/Votes.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1155.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1155MetadataURI.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1155Receiver.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Receiver.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Spender.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1820Implementer.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC1820Registry.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC3156.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721Enumerable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721Metadata.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC721Receiver.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC777.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC777Recipient.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/IERC777Sender.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC2612.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol::4 => pragma solidity ^0.8.9;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/metatx/MinimalForwarder.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlCrossChainMock.sol::3 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlEnumerableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AddressImpl.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ArraysImpl.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/BadBeacon.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/Base64Mock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/BitmapMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/CallReceiverMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/CheckpointsImpl.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ClashingImplementation.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ClonesMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ConditionalEscrowMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ContextMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/CountersImpl.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/Create2Impl.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/DoubleEndedQueueMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/DummyImplementation.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ECDSAMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EIP712External.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155BurnableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155Mock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155PausableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155ReceiverMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155SupplyMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1155URIStorageMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1271WalletMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165InterfacesSupported.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165MissingData.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165NotSupported.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165CheckerMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165Mock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC165StorageMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC1820ImplementerMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20BurnableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20CappedMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20DecimalsMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20FlashMintMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20Mock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20PausableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20PermitMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20SnapshotMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20VotesCompMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20VotesMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC20WrapperMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC2771ContextMock.sol::3 => pragma solidity ^0.8.9;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC3156FlashBorrowerMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC4626Mock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721BurnableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721EnumerableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721Mock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721PausableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721ReceiverMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721RoyaltyMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721URIStorageMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC721VotesMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC777Mock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableMapMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EnumerableSetMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/EtherReceiverMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorCompMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorCompatibilityBravoMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorPreventLateQuorumMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockCompoundMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorTimelockControlMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorVoteMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/GovernorWithParamsMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/InitializableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MathMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MerkleProofWrapper.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MulticallTest.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MulticallTokenMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/MultipleInheritanceInitializableMocks.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/OwnableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/PausableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/PullPaymentMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/RegressionImplementation.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeCastMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeERC20Helper.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeMathMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SignatureCheckerMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SignedMathMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SignedSafeMathMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SingleInheritanceInitializableMocks.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/StorageSlotMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/StringsMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/TimersBlockNumberImpl.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/TimersTimestampImpl.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/UUPS/UUPSLegacy.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/UUPS/UUPSUpgradeableMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/VotesMock.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol::27 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/crosschain/bridges.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/crosschain/receivers.sol::3 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor1.sol::2 => pragma solidity ^0.8.2;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor2.sol::2 => pragma solidity ^0.8.2;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/wizard/MyGovernor3.sol::2 => pragma solidity ^0.8.2;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/Clones.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol::4 => pragma solidity ^0.8.2;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol::4 => pragma solidity ^0.8.2;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/security/Pausable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/security/PullPayment.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Burnable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Pausable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Capped.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20FlashMint.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Pausable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Snapshot.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20VotesComp.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Wrapper.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/TokenTimelock.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Burnable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Pausable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Royalty.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/draft-ERC721Votes.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/ERC777.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/IERC777.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/IERC777Recipient.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/IERC777Sender.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC777/presets/ERC777PresetFixedSupply.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Address.sol::4 => pragma solidity ^0.8.1;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Arrays.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Base64.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Context.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Counters.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Create2.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Multicall.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Strings.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/Timers.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/ConditionalEscrow.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/Escrow.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/escrow/RefundEscrow.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Storage.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/ERC1820Implementer.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/IERC1820Implementer.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/introspection/IERC1820Registry.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/Math.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/BitMaps.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol::3 => pragma solidity ^0.8.4;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/amb/IAMB.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/arbitrum/IArbSys.sol::3 => pragma solidity >=0.4.21 <0.9.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/arbitrum/IBridge.sol::20 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/arbitrum/IInbox.sol::20 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/arbitrum/IMessageProvider.sol::20 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/arbitrum/IOutbox.sol::20 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/compound/ICompoundTimelock.sol::4 => pragma solidity ^0.8.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/optimism/ICrossDomainMessenger.sol::3 => pragma solidity >0.5.0 <0.9.0;
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/vendor/polygon/IFxMessageProcessor.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/LBErrors.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/LBFactory.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/LBPair.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/LBQuoter.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/LBRouter.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/LBToken.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/IJoeFactory.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/IJoePair.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/IJoeRouter01.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/IJoeRouter02.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/ILBFactory.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/ILBFlashLoanCallback.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/ILBPair.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/ILBRouter.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/ILBToken.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/IPendingOwnable.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/interfaces/IWAVAX.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/BinHelper.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/BitMath.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/Buffer.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/Constants.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/Decoder.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/Encoder.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/FeeDistributionHelper.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/FeeHelper.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/JoeLibrary.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/Math128x128.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/Math512Bits.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/Oracle.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/PendingOwnable.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/ReentrancyGuardUpgradeable.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/SafeCast.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/SafeMath.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/Samples.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/SwapHelper.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/TokenHelper.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/src/libraries/TreeMath.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/BinHelper.T.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/Faucet.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBFactory.MultiPools.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBFactory.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBPair.Fees.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBPair.FlashLoans.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBPair.Liquidity.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBPair.Oracle.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBPair.Swaps.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBQuoter.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBRouter.FeesOnLiquidityAdd.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBRouter.Liquidity.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBRouter.Swaps.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBRouter.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBToken.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/LBTokenInternal.t.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/TestHelper.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/mocks/ERC20.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/mocks/ERC20MockDecimals.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/mocks/ERC20MockDecimalsOwnable.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/mocks/ERC20WithTransferTax.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/mocks/Faucet.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/mocks/FlashloanBorrower.sol::3 => pragma solidity ^0.8.0;
  2022-10-traderjoe/test/mocks/WAVAX.sol::3 => pragma solidity ^0.8.0;

 L005:
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/access/AccessControl.sol::205 => function _setupRole(bytes32 role, address account) internal virtual {
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::87 => _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::88 => _setupRole(TIMELOCK_ADMIN_ROLE, address(this));
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::92 => _setupRole(PROPOSER_ROLE, proposers[i]);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::93 => _setupRole(CANCELLER_ROLE, proposers[i]);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol::98 => _setupRole(EXECUTOR_ROLE, executors[i]);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlCrossChainMock.sol::10 => _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlEnumerableMock.sol::9 => _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/AccessControlMock.sol::9 => _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/mocks/SafeERC20Helper.sol::164 => _token.safeApprove(address(0), amount);
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::37 => _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::39 => _setupRole(MINTER_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol::40 => _setupRole(PAUSER_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol::39 => _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol::41 => _setupRole(MINTER_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol::42 => _setupRole(PAUSER_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol::46 => function safeApprove(
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::61 => _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::63 => _setupRole(MINTER_ROLE, _msgSender());
  2022-10-traderjoe/lib/openzeppelin-contracts/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol::64 => _setupRole(PAUSER_ROLE, _msgSender());

